// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _i2;
import 'dart:typed_data' as _i12;

import 'package:celest_core/celest_core.dart' as _i4;
import 'package:fast_immutable_collections/src/ilist/ilist.dart' as _i8;
import 'package:fast_immutable_collections/src/imap/imap.dart' as _i9;

import '../../functions/classes.dart' as _i3;
import '../../functions/cycles.dart' as _i5;
import '../../functions/exceptions.dart' as _i6;
import '../../functions/generic_wrappers.dart' as _i7;
import '../../functions/metadata.dart' as _i10;
import '../../functions/parameter_types.dart' as _i11;
import '../../functions/records.dart' as _i13;
import '../../functions/sealed_classes.dart' as _i14;
import 'client.dart' as _i1;

class CelestFunctions {
  final anonymousApi = CelestFunctionsAnonymousApi();

  final anonymousFunction = CelestFunctionsAnonymousFunction();

  final apiAuthConstantVariables = CelestFunctionsApiAuthConstantVariables();

  final authenticatedApi = CelestFunctionsAuthenticatedApi();

  final authenticatedFunction = CelestFunctionsAuthenticatedFunction();

  /// Tests that classes with and without explicit fromJson/toJson methods are
  /// serializable and deserializable.
  final classes = CelestFunctionsClasses();

  /// Tests that some cycles are allowed, e.g. when there is at least one level
  /// of indirection.
  final cycles = CelestFunctionsCycles();

  final exceptions = CelestFunctionsExceptions();

  /// Tests that classes which wrap generic types are generated correctly when
  /// those generic types follow the specifications of `json_serializable`, e.g.
  /// having a `toJson` method with function parameters for mapping the
  /// underlying types to JSON (Object Function(T) toJsonT).
  final genericWrappers = CelestFunctionsGenericWrappers();

  /// Tests that metadata associated with functions and parameters are correctly
  /// parsed and transferred to the generated client.
  final metadata = CelestFunctionsMetadata();

  final middleware = CelestFunctionsMiddleware();

  final parameterTypes = CelestFunctionsParameterTypes();

  final parameters = CelestFunctionsParameters();

  /// Tests that records with and without aliases are serializable and
  /// deserializable.
  final records = CelestFunctionsRecords();

  /// Validates all permutations of return types.
  final returnTypes = CelestFunctionsReturnTypes();

  final sealedClasses = CelestFunctionsSealedClasses();
}

class CelestFunctionsAnonymousApi {
  Future<String> sayHelloAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<String> sayHello() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

class CelestFunctionsAnonymousFunction {
  Future<String> sayHello() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<String> sayHelloAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

class CelestFunctionsApiAuthConstantVariables {
  Future<String> sayHelloAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<String> sayHello() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

class CelestFunctionsAuthenticatedApi {
  Future<String> sayHelloAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<String> sayGoodbyeAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

class CelestFunctionsAuthenticatedFunction {
  Future<String> sayHelloAuthenticated() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<String> sayHello() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

/// Tests that classes with and without explicit fromJson/toJson methods are
/// serializable and deserializable.
class CelestFunctionsClasses {
  Future<_i3.Empty> empty(_i3.Empty value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Empty>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Empty>(_i2.jsonDecode($response.body));
  }

  Future<_i3.Empty> asyncEmpty(_i3.Empty value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Empty>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Empty>(_i2.jsonDecode($response.body));
  }

  Future<_i3.Fields> fields(_i3.Fields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Fields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Fields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.Fields> asyncFields(_i3.Fields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Fields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Fields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.Fields?> nullableFields(_i3.Fields? value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Fields?>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Fields?>(_i2.jsonDecode($response.body));
  }

  Future<_i3.Fields?> asyncNullableFields(_i3.Fields? value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.Fields?>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.Fields?>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NamedFields> namedFields(_i3.NamedFields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.NamedFields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NamedFields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NamedFields> asyncNamedFields(_i3.NamedFields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.NamedFields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NamedFields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.MixedFields> mixedFields(_i3.MixedFields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.MixedFields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.MixedFields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.MixedFields> asyncMixedFields(_i3.MixedFields value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.MixedFields>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.MixedFields>(_i2.jsonDecode($response.body));
  }

  Future<_i3.DefaultValues> defaultValues(_i3.DefaultValues value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.DefaultValues>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.DefaultValues>(_i2.jsonDecode($response.body));
  }

  Future<_i3.DefaultValues> asyncDefaultValues(_i3.DefaultValues value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.DefaultValues>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.DefaultValues>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NestedClass> nestedClass(_i3.NestedClass value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.NestedClass>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NestedClass>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NestedClass> asyncNestedClass(_i3.NestedClass value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.NestedClass>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NestedClass>(_i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyFromJson> onlyFromJson(_i3.OnlyFromJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.OnlyFromJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.OnlyFromJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyFromJson> asyncOnlyFromJson(_i3.OnlyFromJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.OnlyFromJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.OnlyFromJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyToJson> onlyToJson(_i3.OnlyToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.OnlyToJson>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.OnlyToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyToJson> asyncOnlyToJson(_i3.OnlyToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i3.OnlyToJson>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.OnlyToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyToJsonWithDefaults> onlyToJsonWithDefaults(
      _i3.OnlyToJsonWithDefaults value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value':
            _i4.Serializers.scoped.serialize<_i3.OnlyToJsonWithDefaults>(value)
      }),
    );
    return _i4.Serializers.scoped.deserialize<_i3.OnlyToJsonWithDefaults>(
        _i2.jsonDecode($response.body));
  }

  Future<_i3.OnlyToJsonWithDefaults> asyncOnlyToJsonWithDefaults(
      _i3.OnlyToJsonWithDefaults value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value':
            _i4.Serializers.scoped.serialize<_i3.OnlyToJsonWithDefaults>(value)
      }),
    );
    return _i4.Serializers.scoped.deserialize<_i3.OnlyToJsonWithDefaults>(
        _i2.jsonDecode($response.body));
  }

  Future<_i3.FromJsonAndToJson> fromAndToJson(
      _i3.FromJsonAndToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.FromJsonAndToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.FromJsonAndToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.FromJsonAndToJson> asyncFromAndToJson(
      _i3.FromJsonAndToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.FromJsonAndToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.FromJsonAndToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapToJson> nonMapToJson(_i3.NonMapToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.NonMapToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NonMapToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapToJson> asyncNonMapToJson(_i3.NonMapToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i3.NonMapToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NonMapToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapToJsonWithDefaults> nonMapToJsonWithDefaults(
      _i3.NonMapToJsonWithDefaults value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped
            .serialize<_i3.NonMapToJsonWithDefaults>(value)
      }),
    );
    return _i4.Serializers.scoped.deserialize<_i3.NonMapToJsonWithDefaults>(
        _i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapToJsonWithDefaults> asyncNonMapToJsonWithDefaults(
      _i3.NonMapToJsonWithDefaults value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped
            .serialize<_i3.NonMapToJsonWithDefaults>(value)
      }),
    );
    return _i4.Serializers.scoped.deserialize<_i3.NonMapToJsonWithDefaults>(
        _i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapFromAndToJson> nonMapFromAndToJson(
      _i3.NonMapFromAndToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value':
            _i4.Serializers.scoped.serialize<_i3.NonMapFromAndToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NonMapFromAndToJson>(_i2.jsonDecode($response.body));
  }

  Future<_i3.NonMapFromAndToJson> asyncNonMapFromAndToJson(
      _i3.NonMapFromAndToJson value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value':
            _i4.Serializers.scoped.serialize<_i3.NonMapFromAndToJson>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i3.NonMapFromAndToJson>(_i2.jsonDecode($response.body));
  }
}

/// Tests that some cycles are allowed, e.g. when there is at least one level
/// of indirection.
class CelestFunctionsCycles {
  Future<_i5.Node> createTree() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i5.Node>(_i2.jsonDecode($response.body));
  }

  Future<void> printTree(_i5.Node node) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'node': _i4.Serializers.scoped.serialize<_i5.Node>(node)}),
    );
    return;
  }

  Future<_i5.Node> combineTrees(
    _i5.Node tree1, [
    _i5.Parent? tree2 = null,
    _i5.Node? tree3 = null,
    List<_i5.Node?> additionalChildren = const [],
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'tree1': _i4.Serializers.scoped.serialize<_i5.Node>(tree1),
        r'tree2': _i4.Serializers.scoped.serialize<_i5.Parent?>(tree2),
        r'tree3': _i4.Serializers.scoped.serialize<_i5.Node?>(tree3),
        r'additionalChildren': additionalChildren
            .map((el) => _i4.Serializers.scoped.serialize<_i5.Node?>(el))
            .toList(),
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i5.Node>(_i2.jsonDecode($response.body));
  }

  /// Tests that self-referencing is allowed when there is a level
  /// of indirection, e.g. nullability, generics, or a wrapper.
  Future<_i5.SelfReferencing> selfReferencing(
      _i5.SelfReferencing selfReferencing) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'selfReferencing': _i4.Serializers.scoped
            .serialize<_i5.SelfReferencing>(selfReferencing)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i5.SelfReferencing>(_i2.jsonDecode($response.body));
  }
}

class CelestFunctionsExceptions {
  Future<void> throwsException(
      {required _i6.SupportedExceptionType type}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'type':
            _i4.Serializers.scoped.serialize<_i6.SupportedExceptionType>(type)
      }),
    );
    return;
  }

  Future<void> throwsError({required _i6.SupportedErrorType type}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'type': _i4.Serializers.scoped.serialize<_i6.SupportedErrorType>(type)
      }),
    );
    return;
  }

  Future<void> throwsCustomException() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<void> throwsCustomExceptionToFromJson() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<void> throwsCustomError() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<void> throwsCustomErrorToFromJson() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<void> throwsCustomErrorWithStackTrace() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }
}

/// Tests that classes which wrap generic types are generated correctly when
/// those generic types follow the specifications of `json_serializable`, e.g.
/// having a `toJson` method with function parameters for mapping the
/// underlying types to JSON (Object Function(T) toJsonT).
class CelestFunctionsGenericWrappers {
  Future<_i7.GenericWrappers> genericWrappers(_i7.GenericWrappers value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i7.GenericWrappers>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i7.GenericWrappers>(_i2.jsonDecode($response.body));
  }

  Future<_i7.GenericWrappers> genericWrappersAsync(
      _i7.GenericWrappers value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i7.GenericWrappers>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i7.GenericWrappers>(_i2.jsonDecode($response.body));
  }

  Future<_i7.GenericWrappers> genericWrapperParameters({
    required _i8.IList<String> listOfString,
    required _i8.IList<Uri> listOfUri,
    required _i8.IList<_i7.SimpleClass> listOfSimpleClass,
    required _i8.IList<_i8.IList<String>> listOfListOfString,
    required _i8.IList<_i8.IList<Uri>> listOfListOfUri,
    required _i8.IList<_i8.IList<_i7.SimpleClass>> listOfListOfSimpleClass,
    required _i9.IMap<String, String> mapOfString,
    required _i9.IMap<String, Uri> mapOfUri,
    required _i9.IMap<String, _i7.SimpleClass> mapOfSimpleClass,
    required _i9.IMap<String, _i8.IList<String>> mapOfListOfString,
    required _i9.IMap<String, _i8.IList<Uri>> mapOfListOfUri,
    required _i9.IMap<String, _i8.IList<_i7.SimpleClass>>
        mapOfListOfSimpleClass,
    required _i9.IMap<String, _i9.IMap<String, String>> mapOfMapOfString,
    required _i9.IMap<String, _i9.IMap<String, Uri>> mapOfMapOfUri,
    required _i9.IMap<String, _i9.IMap<String, _i7.SimpleClass>>
        mapOfMapOfSimpleClass,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'listOfString':
            _i4.Serializers.scoped.serialize<_i8.IList<String>>(listOfString),
        r'listOfUri':
            _i4.Serializers.scoped.serialize<_i8.IList<Uri>>(listOfUri),
        r'listOfSimpleClass': _i4.Serializers.scoped
            .serialize<_i8.IList<_i7.SimpleClass>>(listOfSimpleClass),
        r'listOfListOfString': _i4.Serializers.scoped
            .serialize<_i8.IList<_i8.IList<String>>>(listOfListOfString),
        r'listOfListOfUri': _i4.Serializers.scoped
            .serialize<_i8.IList<_i8.IList<Uri>>>(listOfListOfUri),
        r'listOfListOfSimpleClass': _i4.Serializers.scoped
            .serialize<_i8.IList<_i8.IList<_i7.SimpleClass>>>(
                listOfListOfSimpleClass),
        r'mapOfString': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, String>>(mapOfString),
        r'mapOfUri':
            _i4.Serializers.scoped.serialize<_i9.IMap<String, Uri>>(mapOfUri),
        r'mapOfSimpleClass': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i7.SimpleClass>>(mapOfSimpleClass),
        r'mapOfListOfString': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i8.IList<String>>>(mapOfListOfString),
        r'mapOfListOfUri': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i8.IList<Uri>>>(mapOfListOfUri),
        r'mapOfListOfSimpleClass': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i8.IList<_i7.SimpleClass>>>(
                mapOfListOfSimpleClass),
        r'mapOfMapOfString': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i9.IMap<String, String>>>(
                mapOfMapOfString),
        r'mapOfMapOfUri': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i9.IMap<String, Uri>>>(mapOfMapOfUri),
        r'mapOfMapOfSimpleClass': _i4.Serializers.scoped
            .serialize<_i9.IMap<String, _i9.IMap<String, _i7.SimpleClass>>>(
                mapOfMapOfSimpleClass),
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i7.GenericWrappers>(_i2.jsonDecode($response.body));
  }
}

/// Tests that metadata associated with functions and parameters are correctly
/// parsed and transferred to the generated client.
class CelestFunctionsMetadata {
  /// A function that has doc comments.
  ///
  /// This is a doc comment.
  ///
  /// # This is an H1
  /// ## This is an H2
  /// ### This is an H3
  /// * This is a list item
  ///
  /// This is an example:
  ///
  /// ```dart
  /// void hasDocComments() {}
  /// ```
  Future<void> hasDocComments() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  @deprecated
  Future<void> hasDeprecatedAnnotation() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  @Deprecated('Do not use this function.')
  Future<void> hasConstructedDeprecatedAnnotation() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  @_i10.MyAnnotation.create(
    'positional',
    named: 'named',
  )
  Future<void> hasNamedConstructedAnnotation() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  @_i10.Literals(
    string: 'string',
    intValue: 1,
    doubleValue: 1.0,
    boolValue: true,
    list: ['list'],
    map: {'map': 'map'},
    enumValue: _i10.LiteralEnum.a,
    recordValue: const (a: 'a', b: 'b', c: 'c'),
  )
  Future<void> hasLiteralsAnnotation(
    @_i10.Literals(
      string: 'string',
      intValue: 1,
      doubleValue: 1.0,
      boolValue: true,
      list: ['list'],
      map: {'map': 'map'},
      enumValue: _i10.LiteralEnum.a,
      recordValue: const (a: 'a', b: 'b', c: 'c'),
    )
    String value, {
    @_i10.Literals(
      string: 'string',
      intValue: 1,
      doubleValue: 1.0,
      boolValue: true,
      list: ['list'],
      map: {'map': 'map'},
      enumValue: _i10.LiteralEnum.a,
      recordValue: const (a: 'a', b: 'b', c: 'c'),
    )
    required String named,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  Future<void> hasNotExportableAnnotation(
    String value, {
    String named = 'named',
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  Future<void> hasNotExportableConstructedAnnotation(
    String value, {
    String named = 'named',
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  @_i10.exportable
  Future<void> hasExportableAnnotation(
    @_i10.exportable String value, {
    @_i10.exportable String named = 'named',
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  @_i10.Exportable()
  Future<void> hasExportableConstructedAnnotation(
    @_i10.Exportable() String value, {
    @_i10.Exportable() String named = 'named',
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  Future<void> hasNotExportableExportableAnnotation(
    String value, {
    String named = 'named',
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'named': named,
      }),
    );
    return;
  }

  Future<void> positionalDefaultValues([
    String value = 'value',
    int intValue = 1,
    double doubleValue = 1.0,
    bool boolValue = true,
    List<String> list = const ['list'],
    Map<String, String> map = const {'map': 'map'},
    _i10.Exportable exportable = const _i10.Exportable(),
    _i10.Serializable serializable = const _i10.Serializable.forType('String'),
    _i10.LiteralEnum enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    }) recordValue = const (a: 'a', b: 'b', c: 'c'),
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'intValue': intValue,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'list': list,
        r'map': map,
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
      }),
    );
    return;
  }

  Future<void> nullablePositionalDefaultValues([
    String? value = 'value',
    int? intValue = 1,
    double? doubleValue = 1.0,
    bool? boolValue = true,
    List<String>? list = const ['list'],
    Map<String, String>? map = const {'map': 'map'},
    _i10.Exportable? exportable = const _i10.Exportable(),
    _i10.Serializable? serializable = const _i10.Serializable.forType('String'),
    _i10.LiteralEnum? enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    })? recordValue = const (a: 'a', b: 'b', c: 'c'),
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'intValue': intValue,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'list': list,
        r'map': map,
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
      }),
    );
    return;
  }

  Future<void> namedDefaultValues({
    String value = 'value',
    int intValue = 1,
    double doubleValue = 1.0,
    bool boolValue = true,
    List<String> list = const ['list'],
    Map<String, String> map = const {'map': 'map'},
    _i10.Exportable exportable = const _i10.Exportable(),
    _i10.Serializable serializable = const _i10.Serializable.forType('String'),
    _i10.LiteralEnum enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    }) recordValue = const (a: 'a', b: 'b', c: 'c'),
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'intValue': intValue,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'list': list,
        r'map': map,
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
      }),
    );
    return;
  }

  Future<void> nullableNamedDefaultValues({
    String? value = 'value',
    int? intValue = 1,
    double? doubleValue = 1.0,
    bool? boolValue = true,
    List<String>? list = const ['list'],
    Map<String, String>? map = const {'map': 'map'},
    _i10.Exportable? exportable = const _i10.Exportable(),
    _i10.Serializable? serializable = const _i10.Serializable.forType('String'),
    _i10.LiteralEnum? enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    })? recordValue = const (a: 'a', b: 'b', c: 'c'),
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'intValue': intValue,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'list': list,
        r'map': map,
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
      }),
    );
    return;
  }

  Future<void> positionalDefaultValueVars([
    int value = _i10.defaultInt,
    double doubleValue = _i10.defaultDouble,
    bool boolValue = _i10.defaultBool,
    String stringValue = _i10.defaultString,
    List<String> listValue = _i10.defaultList,
    Map<String, String> mapValue = _i10.defaultMap,
    _i10.LiteralEnum enumValue = _i10.defaultEnum,
    ({String a, String b, String c}) recordValue = _i10.defaultRecord,
    _i10.Exportable exportable = _i10.defaultExportable,
    _i10.Serializable serializable = _i10.defaultSerializable,
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
      }),
    );
    return;
  }

  Future<void> nullablePositionalDefaultValueVars([
    int? value = _i10.defaultInt,
    double? doubleValue = _i10.defaultDouble,
    bool? boolValue = _i10.defaultBool,
    String? stringValue = _i10.defaultString,
    List<String>? listValue = _i10.defaultList,
    Map<String, String>? mapValue = _i10.defaultMap,
    _i10.LiteralEnum? enumValue = _i10.defaultEnum,
    ({String a, String b, String c})? recordValue = _i10.defaultRecord,
    _i10.Exportable? exportable = _i10.defaultExportable,
    _i10.Serializable? serializable = _i10.defaultSerializable,
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
      }),
    );
    return;
  }

  Future<void> namedDefaultValueVars({
    int value = _i10.defaultInt,
    double doubleValue = _i10.defaultDouble,
    bool boolValue = _i10.defaultBool,
    String stringValue = _i10.defaultString,
    List<String> listValue = _i10.defaultList,
    Map<String, String> mapValue = _i10.defaultMap,
    _i10.LiteralEnum enumValue = _i10.defaultEnum,
    ({String a, String b, String c}) recordValue = _i10.defaultRecord,
    _i10.Exportable exportable = _i10.defaultExportable,
    _i10.Serializable serializable = _i10.defaultSerializable,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
      }),
    );
    return;
  }

  Future<void> nullableNamedDefaultValueVars({
    int? value = _i10.defaultInt,
    double? doubleValue = _i10.defaultDouble,
    bool? boolValue = _i10.defaultBool,
    String? stringValue = _i10.defaultString,
    List<String>? listValue = _i10.defaultList,
    Map<String, String>? mapValue = _i10.defaultMap,
    _i10.LiteralEnum? enumValue = _i10.defaultEnum,
    ({String a, String b, String c})? recordValue = _i10.defaultRecord,
    _i10.Exportable? exportable = _i10.defaultExportable,
    _i10.Serializable? serializable = _i10.defaultSerializable,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
      }),
    );
    return;
  }

  Future<void> positionalDefaultValueVarsPrivate([
    int value = 42,
    double doubleValue = 42.0,
    bool boolValue = true,
    String stringValue = 'default',
    List<String> listValue = const ['default'],
    Map<String, String> mapValue = const {'default': 'default'},
    _i10.LiteralEnum enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    }) recordValue = const (a: 'a', b: 'b', c: 'c'),
    _i10.Exportable exportable = const _i10.Exportable(),
    _i10.Serializable serializable = const _i10.Serializable.forType('String'),
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
      }),
    );
    return;
  }

  Future<void> nullablePositionalDefaultValueVarsPrivate([
    int? value = 42,
    double? doubleValue = 42.0,
    bool? boolValue = true,
    String? stringValue = 'default',
    List<String>? listValue = const ['default'],
    Map<String, String>? mapValue = const {'default': 'default'},
    _i10.LiteralEnum? enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    })? recordValue = const (a: 'a', b: 'b', c: 'c'),
    _i10.Exportable? exportable = const _i10.Exportable(),
    _i10.Serializable? serializable = const _i10.Serializable.forType('String'),
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
      }),
    );
    return;
  }

  Future<void> namedDefaultValueVarsPrivate({
    int value = 42,
    double doubleValue = 42.0,
    bool boolValue = true,
    String stringValue = 'default',
    List<String> listValue = const ['default'],
    Map<String, String> mapValue = const {'default': 'default'},
    _i10.LiteralEnum enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    }) recordValue = const (a: 'a', b: 'b', c: 'c'),
    _i10.Exportable exportable = const _i10.Exportable(),
    _i10.Serializable serializable = const _i10.Serializable.forType('String'),
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable>(serializable),
      }),
    );
    return;
  }

  Future<void> nullableNamedDefaultValueVarsPrivate({
    int? value = 42,
    double? doubleValue = 42.0,
    bool? boolValue = true,
    String? stringValue = 'default',
    List<String>? listValue = const ['default'],
    Map<String, String>? mapValue = const {'default': 'default'},
    _i10.LiteralEnum? enumValue = _i10.LiteralEnum.a,
    ({
      String a,
      String b,
      String c
    })? recordValue = const (a: 'a', b: 'b', c: 'c'),
    _i10.Exportable? exportable = const _i10.Exportable(),
    _i10.Serializable? serializable = const _i10.Serializable.forType('String'),
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': value,
        r'doubleValue': doubleValue,
        r'boolValue': boolValue,
        r'stringValue': stringValue,
        r'listValue': listValue,
        r'mapValue': mapValue,
        r'enumValue':
            _i4.Serializers.scoped.serialize<_i10.LiteralEnum?>(enumValue),
        r'recordValue': _i4.Serializers.scoped
            .serialize<({String a, String b, String c})?>(recordValue),
        r'exportable':
            _i4.Serializers.scoped.serialize<_i10.Exportable?>(exportable),
        r'serializable':
            _i4.Serializers.scoped.serialize<_i10.Serializable?>(serializable),
      }),
    );
    return;
  }
}

class CelestFunctionsMiddleware {
  Future<String> sayHello(String name) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({r'name': name}),
    );
    return (_i2.jsonDecode($response.body) as String);
  }
}

class CelestFunctionsParameterTypes {
  Future<void> simple(
    String aString,
    int anInt,
    double aDouble,
    bool aBool,
    _i11.MyEnum anEnum,
    Null aNull,
    BigInt aBigInt,
    DateTime aDateTime,
    Duration aDuration,
    RegExp aRegExp,
    StackTrace aStackTrace,
    Uri aUri,
    UriData aUriData,
    _i12.Uint8List aUint8List,
    Iterable<String> anIterableOfString,
    Iterable<_i12.Uint8List> anIterableOfUint8List,
    List<String> aListOfString,
    List<int> aListOfInt,
    List<double> aListOfDouble,
    List<bool> aListOfBool,
    List<_i11.MyEnum> aListOfEnum,
    List<Null> aListOfNull,
    List<BigInt> aListOfBigInt,
    List<DateTime> aListOfDateTime,
    List<Duration> aListOfDuration,
    List<RegExp> aListOfRegExp,
    List<StackTrace> aListOfStackTrace,
    List<Uri> aListOfUri,
    List<UriData> aListOfUriData,
    List<_i12.Uint8List> aListOfUint8List,
    Map<String, String> aMapOfString,
    Map<String, int> aMapOfInt,
    Map<String, double> aMapOfDouble,
    Map<String, bool> aMapOfBool,
    Map<String, _i11.MyEnum> aMapOfEnum,
    Map<String, Null> aMapOfNull,
    Map<String, BigInt> aMapOfBigInt,
    Map<String, DateTime> aMapOfDateTime,
    Map<String, Duration> aMapOfDuration,
    Map<String, RegExp> aMapOfRegExp,
    Map<String, StackTrace> aMapOfStackTrace,
    Map<String, Uri> aMapOfUri,
    Map<String, UriData> aMapOfUriData,
    Map<String, _i12.Uint8List> aMapOfUint8List,
  ) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'aString': aString,
        r'anInt': anInt,
        r'aDouble': aDouble,
        r'aBool': aBool,
        r'anEnum': _i4.Serializers.scoped.serialize<_i11.MyEnum>(anEnum),
        r'aNull': aNull,
        r'aBigInt': _i4.Serializers.scoped.serialize<BigInt>(aBigInt),
        r'aDateTime': _i4.Serializers.scoped.serialize<DateTime>(aDateTime),
        r'aDuration': _i4.Serializers.scoped.serialize<Duration>(aDuration),
        r'aRegExp': _i4.Serializers.scoped.serialize<RegExp>(aRegExp),
        r'aStackTrace':
            _i4.Serializers.scoped.serialize<StackTrace>(aStackTrace),
        r'aUri': _i4.Serializers.scoped.serialize<Uri>(aUri),
        r'aUriData': _i4.Serializers.scoped.serialize<UriData>(aUriData),
        r'aUint8List':
            _i4.Serializers.scoped.serialize<_i12.Uint8List>(aUint8List),
        r'anIterableOfString': anIterableOfString,
        r'anIterableOfUint8List': anIterableOfUint8List
            .map((el) => _i4.Serializers.scoped.serialize<_i12.Uint8List>(el))
            .toList(),
        r'aListOfString': aListOfString,
        r'aListOfInt': aListOfInt,
        r'aListOfDouble': aListOfDouble,
        r'aListOfBool': aListOfBool,
        r'aListOfEnum': aListOfEnum
            .map((el) => _i4.Serializers.scoped.serialize<_i11.MyEnum>(el))
            .toList(),
        r'aListOfNull': aListOfNull,
        r'aListOfBigInt': aListOfBigInt
            .map((el) => _i4.Serializers.scoped.serialize<BigInt>(el))
            .toList(),
        r'aListOfDateTime': aListOfDateTime
            .map((el) => _i4.Serializers.scoped.serialize<DateTime>(el))
            .toList(),
        r'aListOfDuration': aListOfDuration
            .map((el) => _i4.Serializers.scoped.serialize<Duration>(el))
            .toList(),
        r'aListOfRegExp': aListOfRegExp
            .map((el) => _i4.Serializers.scoped.serialize<RegExp>(el))
            .toList(),
        r'aListOfStackTrace': aListOfStackTrace
            .map((el) => _i4.Serializers.scoped.serialize<StackTrace>(el))
            .toList(),
        r'aListOfUri': aListOfUri
            .map((el) => _i4.Serializers.scoped.serialize<Uri>(el))
            .toList(),
        r'aListOfUriData': aListOfUriData
            .map((el) => _i4.Serializers.scoped.serialize<UriData>(el))
            .toList(),
        r'aListOfUint8List': aListOfUint8List
            .map((el) => _i4.Serializers.scoped.serialize<_i12.Uint8List>(el))
            .toList(),
        r'aMapOfString': aMapOfString,
        r'aMapOfInt': aMapOfInt,
        r'aMapOfDouble': aMapOfDouble,
        r'aMapOfBool': aMapOfBool,
        r'aMapOfEnum': aMapOfEnum.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.MyEnum>(value),
            )),
        r'aMapOfNull': aMapOfNull,
        r'aMapOfBigInt': aMapOfBigInt.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<BigInt>(value),
            )),
        r'aMapOfDateTime': aMapOfDateTime.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<DateTime>(value),
            )),
        r'aMapOfDuration': aMapOfDuration.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<Duration>(value),
            )),
        r'aMapOfRegExp': aMapOfRegExp.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<RegExp>(value),
            )),
        r'aMapOfStackTrace': aMapOfStackTrace.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<StackTrace>(value),
            )),
        r'aMapOfUri': aMapOfUri.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<Uri>(value),
            )),
        r'aMapOfUriData': aMapOfUriData.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<UriData>(value),
            )),
        r'aMapOfUint8List': aMapOfUint8List.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i12.Uint8List>(value),
            )),
      }),
    );
    return;
  }

  Future<void> simpleOptional(
    String? aString,
    int? anInt,
    double? aDouble,
    bool? aBool,
    _i11.MyEnum? anEnum,
    Null aNull,
    BigInt? aBigInt,
    DateTime? aDateTime,
    Duration? aDuration,
    RegExp? aRegExp,
    StackTrace? aStackTrace,
    Uri? aUri,
    UriData? aUriData,
    _i12.Uint8List? aUint8List,
    Iterable<String>? anIterableOfString,
    Iterable<_i12.Uint8List>? anIterableOfUint8List,
    List<String>? aListOfString,
    List<int>? aListOfInt,
    List<double>? aListOfDouble,
    List<bool>? aListOfBool,
    List<_i11.MyEnum>? aListOfEnum,
    List<Null>? aListOfNull,
    List<BigInt>? aListOfBigInt,
    List<DateTime>? aListOfDateTime,
    List<Duration>? aListOfDuration,
    List<RegExp>? aListOfRegExp,
    List<StackTrace>? aListOfStackTrace,
    List<Uri>? aListOfUri,
    List<UriData>? aListOfUriData,
    List<_i12.Uint8List>? aListOfUint8List,
    Map<String, String>? aMapOfString,
    Map<String, int>? aMapOfInt,
    Map<String, double>? aMapOfDouble,
    Map<String, bool>? aMapOfBool,
    Map<String, _i11.MyEnum>? aMapOfEnum,
    Map<String, Null>? aMapOfNull,
    Map<String, BigInt>? aMapOfBigInt,
    Map<String, DateTime>? aMapOfDateTime,
    Map<String, Duration>? aMapOfDuration,
    Map<String, RegExp>? aMapOfRegExp,
    Map<String, StackTrace>? aMapOfStackTrace,
    Map<String, Uri>? aMapOfUri,
    Map<String, UriData>? aMapOfUriData,
    Map<String, _i12.Uint8List>? aMapOfUint8List,
  ) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'aString': aString,
        r'anInt': anInt,
        r'aDouble': aDouble,
        r'aBool': aBool,
        r'anEnum': _i4.Serializers.scoped.serialize<_i11.MyEnum?>(anEnum),
        r'aNull': aNull,
        r'aBigInt': _i4.Serializers.scoped.serialize<BigInt?>(aBigInt),
        r'aDateTime': _i4.Serializers.scoped.serialize<DateTime?>(aDateTime),
        r'aDuration': _i4.Serializers.scoped.serialize<Duration?>(aDuration),
        r'aRegExp': _i4.Serializers.scoped.serialize<RegExp?>(aRegExp),
        r'aStackTrace':
            _i4.Serializers.scoped.serialize<StackTrace?>(aStackTrace),
        r'aUri': _i4.Serializers.scoped.serialize<Uri?>(aUri),
        r'aUriData': _i4.Serializers.scoped.serialize<UriData?>(aUriData),
        r'aUint8List':
            _i4.Serializers.scoped.serialize<_i12.Uint8List?>(aUint8List),
        r'anIterableOfString': anIterableOfString,
        r'anIterableOfUint8List': anIterableOfUint8List
            ?.map((el) => _i4.Serializers.scoped.serialize<_i12.Uint8List>(el))
            .toList(),
        r'aListOfString': aListOfString,
        r'aListOfInt': aListOfInt,
        r'aListOfDouble': aListOfDouble,
        r'aListOfBool': aListOfBool,
        r'aListOfEnum': aListOfEnum
            ?.map((el) => _i4.Serializers.scoped.serialize<_i11.MyEnum>(el))
            .toList(),
        r'aListOfNull': aListOfNull,
        r'aListOfBigInt': aListOfBigInt
            ?.map((el) => _i4.Serializers.scoped.serialize<BigInt>(el))
            .toList(),
        r'aListOfDateTime': aListOfDateTime
            ?.map((el) => _i4.Serializers.scoped.serialize<DateTime>(el))
            .toList(),
        r'aListOfDuration': aListOfDuration
            ?.map((el) => _i4.Serializers.scoped.serialize<Duration>(el))
            .toList(),
        r'aListOfRegExp': aListOfRegExp
            ?.map((el) => _i4.Serializers.scoped.serialize<RegExp>(el))
            .toList(),
        r'aListOfStackTrace': aListOfStackTrace
            ?.map((el) => _i4.Serializers.scoped.serialize<StackTrace>(el))
            .toList(),
        r'aListOfUri': aListOfUri
            ?.map((el) => _i4.Serializers.scoped.serialize<Uri>(el))
            .toList(),
        r'aListOfUriData': aListOfUriData
            ?.map((el) => _i4.Serializers.scoped.serialize<UriData>(el))
            .toList(),
        r'aListOfUint8List': aListOfUint8List
            ?.map((el) => _i4.Serializers.scoped.serialize<_i12.Uint8List>(el))
            .toList(),
        r'aMapOfString': aMapOfString,
        r'aMapOfInt': aMapOfInt,
        r'aMapOfDouble': aMapOfDouble,
        r'aMapOfBool': aMapOfBool,
        r'aMapOfEnum': aMapOfEnum?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.MyEnum>(value),
            )),
        r'aMapOfNull': aMapOfNull,
        r'aMapOfBigInt': aMapOfBigInt?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<BigInt>(value),
            )),
        r'aMapOfDateTime': aMapOfDateTime?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<DateTime>(value),
            )),
        r'aMapOfDuration': aMapOfDuration?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<Duration>(value),
            )),
        r'aMapOfRegExp': aMapOfRegExp?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<RegExp>(value),
            )),
        r'aMapOfStackTrace': aMapOfStackTrace?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<StackTrace>(value),
            )),
        r'aMapOfUri': aMapOfUri?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<Uri>(value),
            )),
        r'aMapOfUriData': aMapOfUriData?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<UriData>(value),
            )),
        r'aMapOfUint8List': aMapOfUint8List?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i12.Uint8List>(value),
            )),
      }),
    );
    return;
  }

  Future<void> complex(
    _i11.SimpleStruct aSimpleStruct,
    _i11.ComplexStruct aComplexStruct,
    _i11.SimpleClass aSimpleClass,
    _i11.ComplexClass aComplexClass,
    _i11.SimpleStruct? aNullableSimpleStruct,
    _i11.ComplexStruct? aNullableComplexStruct,
    _i11.SimpleClass? aNullableSimpleClass,
    _i11.ComplexClass? aNullableComplexClass,
    Iterable<_i11.SimpleStruct> anIterableOfSimpleStruct,
    Iterable<_i11.ComplexStruct> anIterableOfComplexStruct,
    Iterable<_i11.SimpleClass> anIterableOfSimpleClass,
    Iterable<_i11.ComplexClass> anIterableOfComplexClass,
    Iterable<_i11.SimpleStruct>? aNullableIterableOfSimpleStruct,
    Iterable<_i11.ComplexStruct>? aNullableIterableOfComplexStruct,
    Iterable<_i11.SimpleClass>? aNullableIterableOfSimpleClass,
    Iterable<_i11.ComplexClass>? aNullableIterableOfComplexClass,
    Iterable<_i11.SimpleStruct?> anIterableOfNullableSimpleStruct,
    Iterable<_i11.ComplexStruct?> anIterableOfNullableComplexStruct,
    Iterable<_i11.SimpleClass?> anIterableOfNullableSimpleClass,
    Iterable<_i11.ComplexClass?> anIterableOfNullableComplexClass,
    List<_i11.SimpleStruct> aListOfSimpleStruct,
    List<_i11.ComplexStruct> aListOfComplexStruct,
    List<_i11.SimpleClass> aListOfSimpleClass,
    List<_i11.ComplexClass> aListOfComplexClass,
    List<_i11.SimpleStruct>? aNullableListOfSimpleStruct,
    List<_i11.ComplexStruct>? aNullableListOfComplexStruct,
    List<_i11.SimpleClass>? aNullableListOfSimpleClass,
    List<_i11.ComplexClass>? aNullableListOfComplexClass,
    List<_i11.SimpleStruct?> aListOfNullableSimpleStruct,
    List<_i11.ComplexStruct?> aListOfNullableComplexStruct,
    List<_i11.SimpleClass?> aListOfNullableSimpleClass,
    List<_i11.ComplexClass?> aListOfNullableComplexClass,
    Map<String, _i11.SimpleStruct> aMapOfSimpleStruct,
    Map<String, _i11.ComplexStruct> aMapOfComplexStruct,
    Map<String, _i11.SimpleClass> aMapOfSimpleClass,
    Map<String, _i11.ComplexClass> aMapOfComplexClass,
    Map<String, _i11.SimpleStruct>? aNullableMapOfSimpleStruct,
    Map<String, _i11.ComplexStruct>? aNullableMapOfComplexStruct,
    Map<String, _i11.SimpleClass>? aNullableMapOfSimpleClass,
    Map<String, _i11.ComplexClass>? aNullableMapOfComplexClass,
    Map<String, _i11.SimpleStruct?> aMapOfNullableSimpleStruct,
    Map<String, _i11.ComplexStruct?> aMapOfNullableComplexStruct,
    Map<String, _i11.SimpleClass?> aMapOfNullableSimpleClass,
    Map<String, _i11.ComplexClass?> aMapOfNullableComplexClass,
    Map<String, _i11.SimpleStruct?>? aNullableMapOfNullableSimpleStruct,
    Map<String, _i11.ComplexStruct?>? aNullableMapOfNullableComplexStruct,
    Map<String, _i11.SimpleClass?>? aNullableMapOfNullableSimpleClass,
    Map<String, _i11.ComplexClass?>? aNullableMapOfNullableComplexClass,
  ) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'aSimpleStruct':
            _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(aSimpleStruct),
        r'aComplexStruct': _i4.Serializers.scoped
            .serialize<_i11.ComplexStruct>(aComplexStruct),
        r'aSimpleClass':
            _i4.Serializers.scoped.serialize<_i11.SimpleClass>(aSimpleClass),
        r'aComplexClass':
            _i4.Serializers.scoped.serialize<_i11.ComplexClass>(aComplexClass),
        r'aNullableSimpleStruct': _i4.Serializers.scoped
            .serialize<_i11.SimpleStruct?>(aNullableSimpleStruct),
        r'aNullableComplexStruct': _i4.Serializers.scoped
            .serialize<_i11.ComplexStruct?>(aNullableComplexStruct),
        r'aNullableSimpleClass': _i4.Serializers.scoped
            .serialize<_i11.SimpleClass?>(aNullableSimpleClass),
        r'aNullableComplexClass': _i4.Serializers.scoped
            .serialize<_i11.ComplexClass?>(aNullableComplexClass),
        r'anIterableOfSimpleStruct': anIterableOfSimpleStruct
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(el))
            .toList(),
        r'anIterableOfComplexStruct': anIterableOfComplexStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(el))
            .toList(),
        r'anIterableOfSimpleClass': anIterableOfSimpleClass
            .map((el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass>(el))
            .toList(),
        r'anIterableOfComplexClass': anIterableOfComplexClass
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.ComplexClass>(el))
            .toList(),
        r'aNullableIterableOfSimpleStruct': aNullableIterableOfSimpleStruct
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(el))
            .toList(),
        r'aNullableIterableOfComplexStruct': aNullableIterableOfComplexStruct
            ?.map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(el))
            .toList(),
        r'aNullableIterableOfSimpleClass': aNullableIterableOfSimpleClass
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass>(el))
            .toList(),
        r'aNullableIterableOfComplexClass': aNullableIterableOfComplexClass
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.ComplexClass>(el))
            .toList(),
        r'anIterableOfNullableSimpleStruct': anIterableOfNullableSimpleStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.SimpleStruct?>(el))
            .toList(),
        r'anIterableOfNullableComplexStruct': anIterableOfNullableComplexStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct?>(el))
            .toList(),
        r'anIterableOfNullableSimpleClass': anIterableOfNullableSimpleClass
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass?>(el))
            .toList(),
        r'anIterableOfNullableComplexClass': anIterableOfNullableComplexClass
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexClass?>(el))
            .toList(),
        r'aListOfSimpleStruct': aListOfSimpleStruct
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(el))
            .toList(),
        r'aListOfComplexStruct': aListOfComplexStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(el))
            .toList(),
        r'aListOfSimpleClass': aListOfSimpleClass
            .map((el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass>(el))
            .toList(),
        r'aListOfComplexClass': aListOfComplexClass
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.ComplexClass>(el))
            .toList(),
        r'aNullableListOfSimpleStruct': aNullableListOfSimpleStruct
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(el))
            .toList(),
        r'aNullableListOfComplexStruct': aNullableListOfComplexStruct
            ?.map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(el))
            .toList(),
        r'aNullableListOfSimpleClass': aNullableListOfSimpleClass
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass>(el))
            .toList(),
        r'aNullableListOfComplexClass': aNullableListOfComplexClass
            ?.map(
                (el) => _i4.Serializers.scoped.serialize<_i11.ComplexClass>(el))
            .toList(),
        r'aListOfNullableSimpleStruct': aListOfNullableSimpleStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.SimpleStruct?>(el))
            .toList(),
        r'aListOfNullableComplexStruct': aListOfNullableComplexStruct
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexStruct?>(el))
            .toList(),
        r'aListOfNullableSimpleClass': aListOfNullableSimpleClass
            .map(
                (el) => _i4.Serializers.scoped.serialize<_i11.SimpleClass?>(el))
            .toList(),
        r'aListOfNullableComplexClass': aListOfNullableComplexClass
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i11.ComplexClass?>(el))
            .toList(),
        r'aMapOfSimpleStruct': aMapOfSimpleStruct.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(value),
            )),
        r'aMapOfComplexStruct': aMapOfComplexStruct.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(value),
            )),
        r'aMapOfSimpleClass': aMapOfSimpleClass.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleClass>(value),
            )),
        r'aMapOfComplexClass': aMapOfComplexClass.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexClass>(value),
            )),
        r'aNullableMapOfSimpleStruct': aNullableMapOfSimpleStruct?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleStruct>(value),
            )),
        r'aNullableMapOfComplexStruct': aNullableMapOfComplexStruct?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexStruct>(value),
            )),
        r'aNullableMapOfSimpleClass': aNullableMapOfSimpleClass?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleClass>(value),
            )),
        r'aNullableMapOfComplexClass': aNullableMapOfComplexClass?.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexClass>(value),
            )),
        r'aMapOfNullableSimpleStruct': aMapOfNullableSimpleStruct.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleStruct?>(value),
            )),
        r'aMapOfNullableComplexStruct': aMapOfNullableComplexStruct.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexStruct?>(value),
            )),
        r'aMapOfNullableSimpleClass': aMapOfNullableSimpleClass.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.SimpleClass?>(value),
            )),
        r'aMapOfNullableComplexClass': aMapOfNullableComplexClass.map((
          key,
          value,
        ) =>
            MapEntry(
              key,
              _i4.Serializers.scoped.serialize<_i11.ComplexClass?>(value),
            )),
        r'aNullableMapOfNullableSimpleStruct':
            aNullableMapOfNullableSimpleStruct?.map((
          key,
          value,
        ) =>
                MapEntry(
                  key,
                  _i4.Serializers.scoped.serialize<_i11.SimpleStruct?>(value),
                )),
        r'aNullableMapOfNullableComplexStruct':
            aNullableMapOfNullableComplexStruct?.map((
          key,
          value,
        ) =>
                MapEntry(
                  key,
                  _i4.Serializers.scoped.serialize<_i11.ComplexStruct?>(value),
                )),
        r'aNullableMapOfNullableSimpleClass':
            aNullableMapOfNullableSimpleClass?.map((
          key,
          value,
        ) =>
                MapEntry(
                  key,
                  _i4.Serializers.scoped.serialize<_i11.SimpleClass?>(value),
                )),
        r'aNullableMapOfNullableComplexClass':
            aNullableMapOfNullableComplexClass?.map((
          key,
          value,
        ) =>
                MapEntry(
                  key,
                  _i4.Serializers.scoped.serialize<_i11.ComplexClass?>(value),
                )),
      }),
    );
    return;
  }
}

class CelestFunctionsParameters {
  Future<void> optionalPositional([
    String? optionalString = null,
    int? optionalInt = null,
  ]) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'optionalString': optionalString,
        r'optionalInt': optionalInt,
      }),
    );
    return;
  }

  Future<void> optionalNamed({
    String? namedString = null,
    int? namedInt = null,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'namedString': namedString,
        r'namedInt': namedInt,
      }),
    );
    return;
  }

  Future<void> requiredPositional(
    String requiredString,
    int requiredInt,
  ) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'requiredString': requiredString,
        r'requiredInt': requiredInt,
      }),
    );
    return;
  }

  Future<void> requiredNamed({
    required String requiredString,
    required int requiredInt,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'requiredString': requiredString,
        r'requiredInt': requiredInt,
      }),
    );
    return;
  }
}

/// Tests that records with and without aliases are serializable and
/// deserializable.
class CelestFunctionsRecords {
  Future<({String anotherField, String field})> nonAliasedNamedFields(
      {required ({String anotherField, String field}) value}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped
            .serialize<({String anotherField, String field})>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<({String anotherField, String field})>(
            _i2.jsonDecode($response.body));
  }

  Future<({String anotherField, String field})> asyncNonAliasedNamedFields(
      {required ({String anotherField, String field}) value}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped
            .serialize<({String anotherField, String field})>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<({String anotherField, String field})>(
            _i2.jsonDecode($response.body));
  }

  Future<_i13.NamedFields> aliasedNamedFields(
      {required _i13.NamedFields value}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i13.NamedFields>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.NamedFields>(_i2.jsonDecode($response.body));
  }

  Future<_i13.NamedFields> asyncAliasedNamedFields(
      {required _i13.NamedFields value}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i13.NamedFields>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.NamedFields>(_i2.jsonDecode($response.body));
  }

  Future<
      ({
        _i13.NamedFields aliased,
        ({String anotherField, String field}) nonAliased
      })> namedFields({
    required ({String anotherField, String field}) nonAliased,
    required _i13.NamedFields aliased,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'nonAliased': _i4.Serializers.scoped
            .serialize<({String anotherField, String field})>(nonAliased),
        r'aliased': _i4.Serializers.scoped.serialize<_i13.NamedFields>(aliased),
      }),
    );
    return _i4.Serializers.scoped.deserialize<
        ({
          _i13.NamedFields aliased,
          ({String anotherField, String field}) nonAliased
        })>(_i2.jsonDecode($response.body));
  }

  Future<
      ({
        _i13.NamedFields aliased,
        ({String anotherField, String field}) nonAliased
      })> asyncNamedFields({
    required ({String anotherField, String field}) nonAliased,
    required _i13.NamedFields aliased,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'nonAliased': _i4.Serializers.scoped
            .serialize<({String anotherField, String field})>(nonAliased),
        r'aliased': _i4.Serializers.scoped.serialize<_i13.NamedFields>(aliased),
      }),
    );
    return _i4.Serializers.scoped.deserialize<
        ({
          _i13.NamedFields aliased,
          ({String anotherField, String field}) nonAliased
        })>(_i2.jsonDecode($response.body));
  }

  Future<_i13.Nested> nested(_i13.Nested value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i13.Nested>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.Nested>(_i2.jsonDecode($response.body));
  }

  Future<_i13.Nested> asyncNested(_i13.Nested value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'value': _i4.Serializers.scoped.serialize<_i13.Nested>(value)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.Nested>(_i2.jsonDecode($response.body));
  }

  Future<_i13.NullableNested?> nullableNested(
      _i13.NullableNested? value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i13.NullableNested?>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.NullableNested?>(_i2.jsonDecode($response.body));
  }

  Future<_i13.NullableNested?> asyncNullableNested(
      _i13.NullableNested? value) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'value': _i4.Serializers.scoped.serialize<_i13.NullableNested?>(value)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i13.NullableNested?>(_i2.jsonDecode($response.body));
  }
}

/// Validates all permutations of return types.
class CelestFunctionsReturnTypes {
  Future<void> asyncVoidReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<String> asyncStringReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<int> asyncIntReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toInt();
  }

  Future<double> asyncDoubleReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toDouble();
  }

  Future<bool> asyncBoolReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as bool);
  }

  Future<Iterable<String>> asyncIterableReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<List<String>> asyncListReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<Map<String, String>> asyncMapReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Map<String, Object?>).map((
      key,
      value,
    ) =>
        MapEntry(
          key,
          (value as String),
        ));
  }

  Future<_i11.SimpleStruct> asyncStructReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct>(_i2.jsonDecode($response.body));
  }

  Future<_i11.SimpleStruct?> asyncStructReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct> asyncComplexStructReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct?> asyncComplexStructReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexClass> asyncComplexClassReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexClass>(_i2.jsonDecode($response.body));
  }

  Future<_i11.SimpleClass?> asyncClassReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleClass?>(_i2.jsonDecode($response.body));
  }

  Future<void> asyncOrVoidReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<String> asyncOrStringReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<int> asyncOrIntReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toInt();
  }

  Future<double> asyncOrDoubleReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toDouble();
  }

  Future<bool> asyncOrBoolReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as bool);
  }

  Future<Iterable<String>> asyncOrIterableReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<List<String>> asyncOrListReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<Map<String, String>> asyncOrMapReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Map<String, Object?>).map((
      key,
      value,
    ) =>
        MapEntry(
          key,
          (value as String),
        ));
  }

  Future<_i11.SimpleStruct> asyncOrStructReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct> asyncOrComplexStructReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct>(_i2.jsonDecode($response.body));
  }

  Future<void> asyncOrVoidReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<String?> asyncOrStringReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String?);
  }

  Future<int?> asyncOrIntReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num?)?.toInt();
  }

  Future<double?> asyncOrDoubleReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num?)?.toDouble();
  }

  Future<bool?> asyncOrBoolReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as bool?);
  }

  Future<Iterable<String>?> asyncOrIterableReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>?)
        ?.map((el) => (el as String))
        .toList();
  }

  Future<List<String>?> asyncOrListReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>?)
        ?.map((el) => (el as String))
        .toList();
  }

  Future<Map<String, String>?> asyncOrMapReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Map<String, Object?>?)?.map((
      key,
      value,
    ) =>
        MapEntry(
          key,
          (value as String),
        ));
  }

  Future<_i11.SimpleStruct?> asyncOrStructReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct?> asyncOrComplexStructReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.SimpleClass?> asyncOrSimpleClassReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleClass?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexClass?> asyncOrComplexClassReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexClass?>(_i2.jsonDecode($response.body));
  }

  Future<void> voidReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return;
  }

  Future<String> stringReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String);
  }

  Future<int> intReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toInt();
  }

  Future<double> doubleReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num).toDouble();
  }

  Future<bool> boolReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as bool);
  }

  Future<Iterable<String>> iterableReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<List<String>> listReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => (el as String))
        .toList();
  }

  Future<Map<String, String>> mapReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Map<String, Object?>).map((
      key,
      value,
    ) =>
        MapEntry(
          key,
          (value as String),
        ));
  }

  Future<_i11.SimpleStruct> structReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct> complexReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct>(_i2.jsonDecode($response.body));
  }

  Future<_i11.SimpleClass> simpleClassReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleClass>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexClass> complexClassReturn() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexClass>(_i2.jsonDecode($response.body));
  }

  Future<String?> stringReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as String?);
  }

  Future<int?> intReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num?)?.toInt();
  }

  Future<double?> doubleReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as num?)?.toDouble();
  }

  Future<bool?> boolReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as bool?);
  }

  Future<Iterable<String>?> iterableReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>?)
        ?.map((el) => (el as String))
        .toList();
  }

  Future<List<String>?> listReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>?)
        ?.map((el) => (el as String))
        .toList();
  }

  Future<Map<String, String>?> mapReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return (_i2.jsonDecode($response.body) as Map<String, Object?>?)?.map((
      key,
      value,
    ) =>
        MapEntry(
          key,
          (value as String),
        ));
  }

  Future<_i11.SimpleStruct?> structReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexStruct?> complexReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexStruct?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.SimpleClass?> simpleClassReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.SimpleClass?>(_i2.jsonDecode($response.body));
  }

  Future<_i11.ComplexClass?> complexClassReturnNullable() async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    return _i4.Serializers.scoped
        .deserialize<_i11.ComplexClass?>(_i2.jsonDecode($response.body));
  }
}

class CelestFunctionsSealedClasses {
  Future<double> area(_i14.Shape shape) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'shape': _i4.Serializers.scoped.serialize<_i14.Shape>(shape)}),
    );
    return (_i2.jsonDecode($response.body) as num).toDouble();
  }

  Future<List<_i14.Shape>> sealedClass(
      {required List<_i14.Shape> shapes}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'shapes': shapes
            .map((el) => _i4.Serializers.scoped.serialize<_i14.Shape>(el))
            .toList()
      }),
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => _i4.Serializers.scoped.deserialize<_i14.Shape>(el))
        .toList();
  }

  Future<_i14.Rectangle> rectangle(_i14.Rectangle rectangle) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'rectangle':
            _i4.Serializers.scoped.serialize<_i14.Rectangle>(rectangle)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i14.Rectangle>(_i2.jsonDecode($response.body));
  }

  Future<_i14.Circle> circle(_i14.Circle circle) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode(
          {r'circle': _i4.Serializers.scoped.serialize<_i14.Circle>(circle)}),
    );
    return _i4.Serializers.scoped
        .deserialize<_i14.Circle>(_i2.jsonDecode($response.body));
  }

  Future<List<_i14.ShapeWithInheritedCustomJson>>
      sealedClassWithInheritedCustomJson(
          {required List<_i14.ShapeWithInheritedCustomJson> shapes}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'shapes': shapes
            .map((el) => _i4.Serializers.scoped
                .serialize<_i14.ShapeWithInheritedCustomJson>(el))
            .toList()
      }),
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => _i4.Serializers.scoped
            .deserialize<_i14.ShapeWithInheritedCustomJson>(el))
        .toList();
  }

  Future<List<_i14.ShapeWithCustomJson>> sealedClassWithCustomJson(
      {required List<_i14.ShapeWithCustomJson> shapes}) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'shapes': shapes
            .map((el) =>
                _i4.Serializers.scoped.serialize<_i14.ShapeWithCustomJson>(el))
            .toList()
      }),
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) =>
            _i4.Serializers.scoped.deserialize<_i14.ShapeWithCustomJson>(el))
        .toList();
  }

  Future<List<_i14.ShapeWithOverriddenCustomJson>>
      sealedClassWithOverriddenCustomJson({
    required _i14.CircleWithOverriddenCustomJson circle,
    required _i14.RectangleWithOverriddenCustomJson rectangle,
    required List<_i14.ShapeWithOverriddenCustomJson> other,
  }) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'circle': _i4.Serializers.scoped
            .serialize<_i14.CircleWithOverriddenCustomJson>(circle),
        r'rectangle': _i4.Serializers.scoped
            .serialize<_i14.RectangleWithOverriddenCustomJson>(rectangle),
        r'other': other
            .map((el) => _i4.Serializers.scoped
                .serialize<_i14.ShapeWithOverriddenCustomJson>(el))
            .toList(),
      }),
    );
    return (_i2.jsonDecode($response.body) as Iterable<Object?>)
        .map((el) => _i4.Serializers.scoped
            .deserialize<_i14.ShapeWithOverriddenCustomJson>(el))
        .toList();
  }

  Future<_i14.ShapeWithOverriddenCustomJson> rectangleWithOverriddenCustomJson(
      _i14.RectangleWithOverriddenCustomJson rectangle) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'rectangle': _i4.Serializers.scoped
            .serialize<_i14.RectangleWithOverriddenCustomJson>(rectangle)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i14.ShapeWithOverriddenCustomJson>(
            _i2.jsonDecode($response.body));
  }

  Future<_i14.CircleWithOverriddenCustomJson> circleWithOverriddenCustomJson(
      _i14.ShapeWithOverriddenCustomJson circle) async {
    final $response = await _i1.celest.httpClient.post(
      Uri.parse('https://example.com'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _i2.jsonEncode({
        r'circle': _i4.Serializers.scoped
            .serialize<_i14.ShapeWithOverriddenCustomJson>(circle)
      }),
    );
    return _i4.Serializers.scoped
        .deserialize<_i14.CircleWithOverriddenCustomJson>(
            _i2.jsonDecode($response.body));
  }
}
