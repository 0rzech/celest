// Generated by `celest start`. This file should not be modified manually, but
// it can be checked into version control.

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:celest/celest.dart' as _i1;

const $_CelestResources resources = $_CelestResources();

final class $_CelestResources {
  const $_CelestResources();

  final $_CelestApiResources apis = const $_CelestApiResources();

  List<_i1.CloudWidget> forEnvironment(String environment) {
    final base = <_i1.CloudWidget>[];
    if (environment == 'prod') {
      return <_i1.CloudWidget>[
        ...base,
        apis.override.sayHello,
      ];
    }
    if (environment == 'staging') {
      return <_i1.CloudWidget>[
        ...base,
        apis.override.staging$.sayHello,
      ];
    }
    if (environment == 'dev') {
      return <_i1.CloudWidget>[
        ...base,
        apis.override.dev$.sayHello,
      ];
    }
    throw StateError('Unknown environment: $environment');
  }
}

final class $_CelestApiResources {
  const $_CelestApiResources();

  final $_CelestOverrideApiResource override =
      const $_CelestOverrideApiResource();
}

final class $_CelestOverrideDevApiResource {
  const $_CelestOverrideDevApiResource();

  final sayHello = const _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
    environmentName: r'dev',
  );
}

final class $_CelestOverrideStagingApiResource {
  const $_CelestOverrideStagingApiResource();

  final sayHello = const _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
    environmentName: r'staging',
  );
}

final class $_CelestOverrideApiResource {
  const $_CelestOverrideApiResource();

  final sayHello = const _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
  );

  final $_CelestOverrideDevApiResource dev$ =
      const $_CelestOverrideDevApiResource();

  final $_CelestOverrideStagingApiResource staging$ =
      const $_CelestOverrideStagingApiResource();
}
