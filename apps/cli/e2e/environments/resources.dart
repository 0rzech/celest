// Generated by `celest start`. This file should not be modified manually, but
// it can be checked into version control.

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:celest/celest.dart' as _i1;

abstract final class apis {
  static const override = _i1.CloudApi(name: r'override');
}

abstract final class functions {
  static const overrideSayHello = _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
  );
}

abstract final class devApis {
  static const override = _i1.CloudApi(
    name: r'override',
    environmentName: r'dev',
  );
}

abstract final class devFunctions {
  static const overrideSayHello = _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
    environmentName: r'dev',
  );
}

abstract final class stagingApis {
  static const override = _i1.CloudApi(
    name: r'override',
    environmentName: r'staging',
  );
}

abstract final class stagingFunctions {
  static const overrideSayHello = _i1.CloudFunction<void, String>(
    api: r'override',
    functionName: r'sayHello',
    environmentName: r'staging',
  );
}

List<_i1.CloudWidget> forEnvironment(String environment) {
  const base = <_i1.CloudWidget>[];
  if (environment == 'prod') {
    return const <_i1.CloudWidget>[
      ...base,
      apis.override,
      functions.overrideSayHello,
    ];
  }
  if (environment == 'staging') {
    return const <_i1.CloudWidget>[
      ...base,
      stagingApis.override,
      stagingFunctions.overrideSayHello,
    ];
  }
  if (environment == 'dev') {
    return const <_i1.CloudWidget>[
      ...base,
      devApis.override,
      devFunctions.overrideSayHello,
    ];
  }
  throw StateError('Unknown environment: $environment');
}
