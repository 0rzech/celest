import 'package:celest_cli/src/context.dart';
import 'package:celest_cli/src/sdk.dart';
import 'package:celest_cli/src/version.dart';
import 'package:celest_cli_common/celest_cli_common.dart';

sealed class ProjectItem {
  const ProjectItem();

  /// Creates the item in the given [projectRoot].
  Future<void> create(String projectRoot);
}

sealed class ProjectFile extends ProjectItem {
  const ProjectFile();

  const factory ProjectFile.analysisOptions() = _AnalysisOptions;

  const factory ProjectFile.pubspec(String projectName) = _Pubspec;

  /// The relative path of the item from the project root.
  String get relativePath;
}

final class _AnalysisOptions extends ProjectFile {
  const _AnalysisOptions();

  @override
  String get relativePath => 'analysis_options.yaml';

  @override
  Future<void> create(String projectRoot) async {
    final file = fileSystem.file(p.join(projectRoot, relativePath));
    // TODO(dnys1): Generate analysis_options.yaml
    await file.writeAsString('''
    ''');
  }
}

final class _Pubspec extends ProjectFile {
  const _Pubspec(this.projectName);

  final String projectName;

  @override
  String get relativePath => 'pubspec.yaml';

  @override
  Future<void> create(String projectRoot) async {
    final file = fileSystem.file(p.join(projectRoot, relativePath));
    await file.writeAsString('''
name: $projectName
publish_to: none

environment:
  sdk: ^$dartSdkVersion

dependencies:
  celest: ^$packageVersion
''');
  }
}

sealed class ProjectTemplate extends ProjectItem {
  const ProjectTemplate();

  const factory ProjectTemplate.hello() = _HelloProject;
}

final class _HelloProject extends ProjectTemplate {
  const _HelloProject();

  @override
  Future<void> create(String projectRoot) async {
    final projectFile = fileSystem.file(projectPaths.projectDart);
    await projectFile.writeAsString('''
import 'package:celest/celest.dart';

const project = Project(
  name: 'hello',
);
''');

    final generatedFile = fileSystem.file(projectPaths.resourcesDart);
    await generatedFile.writeAsString(r'''
// Generated by `celest start`. This file should not be modified by hand
// but can be checked into version control.

import 'package:celest/celest.dart';

final celest = $_Celest();

final class $_Celest {
  final functions = $_CelestFunctions();
}

final class $_CelestFunctions {
  final greeting = $_GreetingApi();
}

final class $_GreetingApi {
  final sayHello = CloudFunction<String, String>(
    api: 'greeting',
    functionName: 'sayHello',
  );
}
''');

    final greetingApi = fileSystem.file(
      p.join(projectPaths.apisDir, 'greeting.dart'),
    );
    await greetingApi.create(recursive: true);
    await greetingApi.writeAsString(r'''
import 'package:celest/celest.dart';
import 'package:celest/api/middleware.dart' as middleware;

// Middleware are applied by adding annotations to your function.
//
// They allow reuse of code between functions and can be used for logging,
// authentication, authorization, and more.
@middleware.logRequests()
Future<String> sayHello(FunctionContext context, String name) async {
  return 'Hello, $name';
}
''');
  }
}
