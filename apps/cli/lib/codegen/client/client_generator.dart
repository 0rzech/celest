import 'package:celest_cli/ast/ast.dart' as ast;
import 'package:celest_cli/codegen/client/categories/functions_generator.dart';
import 'package:celest_cli/codegen/client/client_types.dart';
import 'package:celest_cli/src/types/dart_types.dart';
import 'package:code_builder/code_builder.dart';

const kClientHeader = [
  'Generated by Celest. This file should not be modified manually, but',
  'it can be checked into version control.',
];

final class ClientGenerator {
  ClientGenerator({
    required this.project,
  }) {
    _library = LibraryBuilder()
      ..name = ''
      ..comments.addAll(kClientHeader)
      ..body.addAll([
        _client,
        lazySpec(_clientClass.build),
      ]);
  }

  final ast.Project project;
  late final LibraryBuilder _library;

  final _client = Field(
    (f) => f
      ..modifier = FieldModifier.final$
      ..type = ClientTypes.clientClass.ref
      ..name = ClientTypes.topLevelClient.name
      ..assignment = ClientTypes.clientClass.ref.newInstance([]).code,
  );
  final _clientClass = ClassBuilder()
    ..name = ClientTypes.clientClass.name
    ..fields.addAll([
      Field(
        (f) => f
          ..late = true
          ..type = DartTypes.http.client
          ..name = 'httpClient'
          ..assignment = DartTypes.http.client.newInstance([]).code,
      ),
    ]);

  Map<String, Library> generate() {
    final libraries = <String, Library>{};

    final clientInitBody = BlockBuilder();

    final apis = project.apis.values;
    if (apis.isNotEmpty) {
      final functionsGenerator = FunctionsGenerator(apis: apis.toList());
      libraries[ClientPaths.functions] = functionsGenerator.generate();
      _clientClass.fields.add(
        Field(
          (f) => f
            ..modifier = FieldModifier.final$
            ..name = 'functions'
            ..assignment = ClientTypes.functionsClass.ref.newInstance([]).code,
        ),
      );
    }

    // Add client methods
    final clientInit = Method(
      (m) => m
        ..name = 'init'
        ..returns = DartTypes.core.void$
        ..body = clientInitBody.build(),
    );
    _clientClass.methods.add(clientInit);
    libraries[ClientPaths.client] = _library.build();

    return libraries;
  }
}
