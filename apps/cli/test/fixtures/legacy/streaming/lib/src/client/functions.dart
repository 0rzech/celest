// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library;

import 'package:celest/celest.dart';
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:celest_core/src/exception/serialization_exception.dart';

import '../../client.dart';

class CelestFunctions {
  /// Tests the ability to use server-side streaming.
  final serverSide = CelestFunctionsServerSide();
}

/// Tests the ability to use server-side streaming.
class CelestFunctionsServerSide {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Stream<String> hello(List<String> names) {
    final $channel = celest.eventClient
        .connect(celest.baseUri.resolve('/server-side/hello'));
    $channel.sink.add({r'names': names});
    return $channel.stream.map(($event) {
      if ($event.containsKey('error')) {
        _throwError($statusCode: -1, $body: $event);
      }
      return ($event['response'] as String);
    });
  }
}
