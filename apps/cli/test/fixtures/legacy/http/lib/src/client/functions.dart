// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;

import 'package:celest/celest.dart';
import 'package:celest_backend/exceptions/http_errors.dart' as _$http_errors;
import 'package:celest_backend/models/http_errors.dart' as _$http_errors;
import 'package:celest_backend/models/http_header_query.dart'
    as _$http_header_query;
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:celest_core/src/exception/serialization_exception.dart';

import '../../client.dart';

class CelestFunctions {
  final httpErrors = CelestFunctionsHttpErrors();

  final httpHeader = CelestFunctionsHttpHeader();

  final httpMethod = CelestFunctionsHttpMethod();

  final httpQuery = CelestFunctionsHttpQuery();

  final httpStatus = CelestFunctionsHttpStatus();
}

class CelestFunctionsHttpErrors {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case r'CustomBadRequestException':
        throw Serializers.instance
            .deserialize<_$http_errors.CustomBadRequestException>($details);
      case r'ForbiddenException':
        throw Serializers.instance
            .deserialize<_$http_errors.ForbiddenException>($details);
      case r'NotFoundException':
        throw Serializers.instance
            .deserialize<_$http_errors.NotFoundException>($details);
      case r'AnotherNotFoundException':
        throw Serializers.instance
            .deserialize<_$http_errors.AnotherNotFoundException>($details);
      case r'BadGatewayError':
        throw Serializers.instance
            .deserialize<_$http_errors.BadGatewayError>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<void> httpErrors(_$http_errors.ExceptionType type) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-errors/http-errors'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'type':
            Serializers.instance.serialize<_$http_errors.ExceptionType>(type)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }
}

class CelestFunctionsHttpHeader {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<_$http_header_query.HttpHeaderParams> headers(
    String aString,
    int anInt,
    double aDouble,
    num aNum,
    bool aBool,
    DateTime aDateTime,
    String? aNullableString,
    int? aNullableInt,
    double? aNullableDouble,
    num? aNullableNum,
    bool? aNullableBool,
    DateTime? aNullableDateTime,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-header/headers'),
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        r'aString': aString,
        r'anInt': anInt.toString(),
        r'aDouble': aDouble.toString(),
        r'aNum': aNum.toString(),
        r'aBool': aBool.toString(),
        r'aDateTime': aDateTime.toIso8601String(),
        r'aNullableString': aNullableString,
        r'aNullableInt': aNullableInt.toString(),
        r'aNullableDouble': aNullableDouble.toString(),
        r'aNullableNum': aNullableNum.toString(),
        r'aNullableBool': aNullableBool.toString(),
        r'aNullableDateTime': aNullableDateTime.toIso8601String(),
      },
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance
        .deserialize<_$http_header_query.HttpHeaderParams>($body['response']);
  }
}

class CelestFunctionsHttpMethod {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<void> get() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-method/get'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> post() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-method/post'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> put() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-method/put'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> delete() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-method/delete'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> patch() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-method/patch'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }
}

class CelestFunctionsHttpQuery {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<_$http_header_query.HttpQueryParams> query(
    String aString,
    int anInt,
    double aDouble,
    num aNum,
    bool aBool,
    DateTime aDateTime,
    String? aNullableString,
    int? aNullableInt,
    double? aNullableDouble,
    num? aNullableNum,
    bool? aNullableBool,
    DateTime? aNullableDateTime,
    List<String> aListOfString,
    List<int> aListOfInt,
    List<double> aListOfDouble,
    List<num> aListOfNum,
    List<bool> aListOfBool,
    List<DateTime> aListOfDateTime,
    List<String>? aNullableListOfString,
    List<int>? aNullableListOfInt,
    List<double>? aNullableListOfDouble,
    List<num>? aNullableListOfNum,
    List<bool>? aNullableListOfBool,
    List<DateTime>? aNullableListOfDateTime,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-query/query').replace(queryParameters: {
        r'aString': aString,
        r'anInt': anInt.toString(),
        r'aDouble': aDouble.toString(),
        r'aNum': aNum.toString(),
        r'aBool': aBool.toString(),
        r'aDateTime': aDateTime.toIso8601String(),
        r'aNullableString': aNullableString,
        r'aNullableInt': aNullableInt.toString(),
        r'aNullableDouble': aNullableDouble.toString(),
        r'aNullableNum': aNullableNum.toString(),
        r'aNullableBool': aNullableBool.toString(),
        r'aNullableDateTime': aNullableDateTime.toIso8601String(),
        r'aListOfString': aListOfString,
        r'aListOfInt': aListOfInt.map((el) => el.toString()).toList(),
        r'aListOfDouble': aListOfDouble.map((el) => el.toString()).toList(),
        r'aListOfNum': aListOfNum.map((el) => el.toString()).toList(),
        r'aListOfBool': aListOfBool.map((el) => el.toString()).toList(),
        r'aListOfDateTime':
            aListOfDateTime.map((el) => el.toIso8601String()).toList(),
        r'aNullableListOfString': aNullableListOfString,
        r'aNullableListOfInt':
            aNullableListOfInt?.map((el) => el.toString()).toList(),
        r'aNullableListOfDouble':
            aNullableListOfDouble?.map((el) => el.toString()).toList(),
        r'aNullableListOfNum':
            aNullableListOfNum?.map((el) => el.toString()).toList(),
        r'aNullableListOfBool':
            aNullableListOfBool?.map((el) => el.toString()).toList(),
        r'aNullableListOfDateTime':
            aNullableListOfDateTime?.map((el) => el.toIso8601String()).toList(),
      }),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance
        .deserialize<_$http_header_query.HttpQueryParams>($body['response']);
  }
}

class CelestFunctionsHttpStatus {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<void> ok() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-status/ok'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> created() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-status/created'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> accepted() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-status/accepted'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> badRequest() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-status/bad-request'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> internalServerError() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/http-status/internal-server-error'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }
}
