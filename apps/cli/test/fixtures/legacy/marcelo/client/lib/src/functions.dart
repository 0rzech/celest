// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;

import 'package:_common/src/models/available_stock.dart' as _$available_stock;
import 'package:_common/src/models/available_stocks.dart' as _$available_stocks;
import 'package:_common/src/models/cash_balance.dart' as _$cash_balance;
import 'package:_common/src/models/errors_and_exceptions.dart'
    as _$errors_and_exceptions;
import 'package:_common/src/models/portfolio.dart' as _$portfolio;
import 'package:_common/src/models/stock.dart' as _$stock;
import 'package:_common/src/models/ui.dart' as _$ui;
import 'package:celest_backend/exceptions/overrides.dart';
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;
import 'package:celest_core/src/serialization/json_value.dart' as _$celest;

import '../marcelo_client.dart';

class CelestFunctions {
  final exceptions = CelestFunctionsExceptions();

  final models = CelestFunctionsModels();
}

class CelestFunctionsExceptions {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as _$celest.JsonMap?);
    switch ($code) {
      case r'_common.UserException':
        throw _$celest.Serializers.instance
            .deserialize<_$errors_and_exceptions.UserException>($details);
      case r'marcelo.v1.AppError':
        throw _$celest.Serializers.instance.deserialize<AppError>($details);
      case r'marcelo.v1.AppException':
        throw _$celest.Serializers.instance.deserialize<AppException>($details);
      case r'marcelo.v1.NotYetImplementedError':
        throw _$celest.Serializers.instance
            .deserialize<NotYetImplementedError>($details);
      case r'_common.ValidateError':
        throw _$celest.Serializers.instance
            .deserialize<_$errors_and_exceptions.ValidateError>($details);
      case r'marcelo.v1.UserException_ShowInConsole':
        throw _$celest.Serializers.instance
            .deserialize<UserException_ShowInConsole>($details);
      case r'celest.core.v1.CloudException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CloudException>($details);
      case r'celest.core.v1.CancelledException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CancelledException>($details);
      case r'celest.core.v1.UnknownError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnknownError>($details);
      case r'celest.core.v1.BadRequestException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.BadRequestException>($details);
      case r'celest.core.v1.UnauthorizedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnauthorizedException>($details);
      case r'celest.core.v1.NotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.NotFoundException>($details);
      case r'celest.core.v1.AlreadyExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AlreadyExistsException>($details);
      case r'celest.core.v1.PermissionDeniedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.PermissionDeniedException>($details);
      case r'celest.core.v1.ResourceExhaustedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.ResourceExhaustedException>($details);
      case r'celest.core.v1.FailedPreconditionException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.FailedPreconditionException>($details);
      case r'celest.core.v1.AbortedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AbortedException>($details);
      case r'celest.core.v1.OutOfRangeException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.OutOfRangeException>($details);
      case r'celest.core.v1.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnimplementedError>($details);
      case r'celest.core.v1.InternalServerError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.InternalServerError>($details);
      case r'celest.core.v1.UnavailableError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnavailableError>($details);
      case r'celest.core.v1.DataLossError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DataLossError>($details);
      case r'celest.core.v1.DeadlineExceededError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DeadlineExceededError>($details);
      case r'celest.core.v1.SerializationException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.SerializationException>($details);
      default:
        throw _$celest.CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  Future<void> throwsUserException({_$celest.JsonValue? cause}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-user-exception'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        )
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> callsThrowsUserException({_$celest.JsonValue? cause}) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/calls-throws-user-exception'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        )
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> throwsAppError({
    String message = 'message',
    _$celest.JsonValue? error,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-app-error'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'message': message,
        r'error': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          error,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        ),
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> throwsAppException() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-app-exception'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> throwsNotYetImplementedError() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-not-yet-implemented-error'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> throwsValidateError() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/exceptions/throws-validate-error'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }

  Future<void> throwsUserExceptionShowInConsole({
    String message = 'message',
    _$celest.JsonValue? cause,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri
          .resolve('/exceptions/throws-user-exception-show-in-console'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'message': message,
        r'cause': _$celest.Serializers.instance.serialize<_$celest.JsonValue?>(
          cause,
          const _$celest.TypeToken<_$celest.JsonValue?>('JsonValue'),
        ),
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return;
  }
}

class CelestFunctionsModels {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as _$celest.JsonMap?);
    switch ($code) {
      case r'_common.UserException':
        throw _$celest.Serializers.instance
            .deserialize<_$errors_and_exceptions.UserException>($details);
      case r'marcelo.v1.AppError':
        throw _$celest.Serializers.instance.deserialize<AppError>($details);
      case r'marcelo.v1.AppException':
        throw _$celest.Serializers.instance.deserialize<AppException>($details);
      case r'marcelo.v1.NotYetImplementedError':
        throw _$celest.Serializers.instance
            .deserialize<NotYetImplementedError>($details);
      case r'_common.ValidateError':
        throw _$celest.Serializers.instance
            .deserialize<_$errors_and_exceptions.ValidateError>($details);
      case r'marcelo.v1.UserException_ShowInConsole':
        throw _$celest.Serializers.instance
            .deserialize<UserException_ShowInConsole>($details);
      case r'celest.core.v1.CloudException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CloudException>($details);
      case r'celest.core.v1.CancelledException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CancelledException>($details);
      case r'celest.core.v1.UnknownError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnknownError>($details);
      case r'celest.core.v1.BadRequestException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.BadRequestException>($details);
      case r'celest.core.v1.UnauthorizedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnauthorizedException>($details);
      case r'celest.core.v1.NotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.NotFoundException>($details);
      case r'celest.core.v1.AlreadyExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AlreadyExistsException>($details);
      case r'celest.core.v1.PermissionDeniedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.PermissionDeniedException>($details);
      case r'celest.core.v1.ResourceExhaustedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.ResourceExhaustedException>($details);
      case r'celest.core.v1.FailedPreconditionException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.FailedPreconditionException>($details);
      case r'celest.core.v1.AbortedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AbortedException>($details);
      case r'celest.core.v1.OutOfRangeException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.OutOfRangeException>($details);
      case r'celest.core.v1.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnimplementedError>($details);
      case r'celest.core.v1.InternalServerError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.InternalServerError>($details);
      case r'celest.core.v1.UnavailableError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnavailableError>($details);
      case r'celest.core.v1.DataLossError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DataLossError>($details);
      case r'celest.core.v1.DeadlineExceededError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DeadlineExceededError>($details);
      case r'celest.core.v1.SerializationException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.SerializationException>($details);
      default:
        throw _$celest.CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  Future<_$available_stock.AvailableStock> availableStock(
      _$available_stock.AvailableStock availableStock) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/available-stock'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'availableStock': _$celest.Serializers.instance
            .serialize<_$available_stock.AvailableStock>(availableStock)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$available_stock.AvailableStock>($body['response']);
  }

  Future<_$available_stocks.AvailableStocks> availableStocks(
      _$available_stocks.AvailableStocks availableStocks) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/available-stocks'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'availableStocks': _$celest.Serializers.instance
            .serialize<_$available_stocks.AvailableStocks>(availableStocks)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$available_stocks.AvailableStocks>($body['response']);
  }

  Future<_$cash_balance.CashBalance> cashBalance(
      _$cash_balance.CashBalance cashBalance) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/cash-balance'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'cashBalance': _$celest.Serializers.instance
            .serialize<_$cash_balance.CashBalance>(cashBalance)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$cash_balance.CashBalance>($body['response']);
  }

  Future<_$portfolio.Portfolio> portfolio(
      _$portfolio.Portfolio portfolio) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/portfolio'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'portfolio': _$celest.Serializers.instance
            .serialize<_$portfolio.Portfolio>(portfolio)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$portfolio.Portfolio>($body['response']);
  }

  Future<_$stock.Stock> stock(_$stock.Stock stock) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/stock'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'stock': _$celest.Serializers.instance.serialize<_$stock.Stock>(stock)
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$stock.Stock>($body['response']);
  }

  Future<_$ui.Ui> ui(_$ui.Ui ui) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/models/ui'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode(
          {r'ui': _$celest.Serializers.instance.serialize<_$ui.Ui>(ui)}),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$ui.Ui>($body['response']);
  }
}
