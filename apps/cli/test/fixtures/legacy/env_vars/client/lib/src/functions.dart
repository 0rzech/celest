// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;

import 'package:celest_backend/models/person.dart';
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;

import '../env_vars_client.dart';

class CelestFunctions {
  final injected = CelestFunctionsInjected();
}

class CelestFunctionsInjected {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as _$celest.JsonMap?);
    switch ($code) {
      case r'celest.core.v1.CloudException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CloudException>($details);
      case r'celest.core.v1.CancelledException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CancelledException>($details);
      case r'celest.core.v1.UnknownError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnknownError>($details);
      case r'celest.core.v1.BadRequestException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.BadRequestException>($details);
      case r'celest.core.v1.UnauthorizedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnauthorizedException>($details);
      case r'celest.core.v1.NotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.NotFoundException>($details);
      case r'celest.core.v1.AlreadyExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AlreadyExistsException>($details);
      case r'celest.core.v1.PermissionDeniedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.PermissionDeniedException>($details);
      case r'celest.core.v1.ResourceExhaustedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.ResourceExhaustedException>($details);
      case r'celest.core.v1.FailedPreconditionException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.FailedPreconditionException>($details);
      case r'celest.core.v1.AbortedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AbortedException>($details);
      case r'celest.core.v1.OutOfRangeException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.OutOfRangeException>($details);
      case r'celest.core.v1.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnimplementedError>($details);
      case r'celest.core.v1.InternalServerError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.InternalServerError>($details);
      case r'celest.core.v1.UnavailableError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnavailableError>($details);
      case r'celest.core.v1.DataLossError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DataLossError>($details);
      case r'celest.core.v1.DeadlineExceededError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DeadlineExceededError>($details);
      case r'celest.core.v1.SerializationException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.SerializationException>($details);
      default:
        throw _$celest.CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  Future<String> sayHello() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/injected/say-hello'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return ($body['response'] as String);
  }

  Future<Person> sayHelloPerson() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/injected/say-hello-person'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance.deserialize<Person>($body['response']);
  }
}
