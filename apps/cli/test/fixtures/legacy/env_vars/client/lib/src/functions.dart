// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;

import 'package:celest/celest.dart';
import 'package:celest_backend/models/person.dart' as _$person;
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:celest_core/src/exception/serialization_exception.dart';

import '../celest_client.dart';

class CelestFunctions {
  final injected = CelestFunctionsInjected();
}

class CelestFunctionsInjected {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as JsonMap?);
    switch ($code) {
      case r'celest.core.CloudException':
        throw Serializers.instance.deserialize<CloudException>($details);
      case r'celest.core.CancelledException':
        throw Serializers.instance.deserialize<CancelledException>($details);
      case r'celest.core.UnknownError':
        throw Serializers.instance.deserialize<UnknownError>($details);
      case r'celest.core.BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'celest.core.UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'celest.core.NotFoundException':
        throw Serializers.instance.deserialize<NotFoundException>($details);
      case r'celest.core.AlreadyExistsException':
        throw Serializers.instance
            .deserialize<AlreadyExistsException>($details);
      case r'celest.core.PermissionDeniedException':
        throw Serializers.instance
            .deserialize<PermissionDeniedException>($details);
      case r'celest.core.ResourceExhaustedException':
        throw Serializers.instance
            .deserialize<ResourceExhaustedException>($details);
      case r'celest.core.FailedPreconditionException':
        throw Serializers.instance
            .deserialize<FailedPreconditionException>($details);
      case r'celest.core.AbortedException':
        throw Serializers.instance.deserialize<AbortedException>($details);
      case r'celest.core.OutOfRangeException':
        throw Serializers.instance.deserialize<OutOfRangeException>($details);
      case r'celest.core.UnimplementedError':
        throw Serializers.instance.deserialize<UnimplementedError>($details);
      case r'celest.core.InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'celest.core.UnavailableError':
        throw Serializers.instance.deserialize<UnavailableError>($details);
      case r'celest.core.DataLossError':
        throw Serializers.instance.deserialize<DataLossError>($details);
      case r'celest.core.DeadlineExceededError':
        throw Serializers.instance.deserialize<DeadlineExceededError>($details);
      case r'celest.core.SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      default:
        throw CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  Future<String> sayHello() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/injected/say-hello'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return ($body['response'] as String);
  }

  Future<_$person.Person> sayHelloPerson() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/injected/say-hello-person'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance.deserialize<_$person.Person>($body['response']);
  }
}
