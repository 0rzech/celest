// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;
import 'dart:ui' as _$ui;

import 'package:celest/celest.dart';
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:celest_core/src/exception/serialization_exception.dart';

import '../../client.dart';

class CelestFunctions {
  /// Tests that dart:ui types can be used as inputs/outputs in functions.
  final dartUi = CelestFunctionsDartUi();
}

/// Tests that dart:ui types can be used as inputs/outputs in functions.
class CelestFunctionsDartUi {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  Future<_$ui.Color> lerpColor(
    _$ui.Color a,
    _$ui.Color b,
    double t,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/dart-ui/lerp-color'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'a': Serializers.instance.serialize<_$ui.Color>(a),
        r'b': Serializers.instance.serialize<_$ui.Color>(b),
        r't': t,
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance.deserialize<_$ui.Color>($body['response']);
  }

  Future<_$ui.Locale> addCountryCode(
    _$ui.Locale locale,
    String countryCode,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/dart-ui/add-country-code'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'locale': Serializers.instance.serialize<_$ui.Locale>(locale),
        r'countryCode': countryCode,
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance.deserialize<_$ui.Locale>($body['response']);
  }
}
