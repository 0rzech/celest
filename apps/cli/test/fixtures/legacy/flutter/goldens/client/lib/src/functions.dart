// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import, deprecated_member_use

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async' as _$async;
import 'dart:convert' as _$convert;
import 'dart:io' as _$io;
import 'dart:isolate' as _$isolate;
import 'dart:typed_data' as _$typed_data;
import 'dart:ui' as _$ui;

import 'package:celest/celest.dart' as _$celest;
import 'package:celest_core/celest_core.dart' as _$celest;
import 'package:celest_core/src/exception/cloud_exception.dart' as _$celest;
import 'package:celest_core/src/exception/serialization_exception.dart'
    as _$celest;
import 'package:flutter/src/painting/image_provider.dart' as _$image_provider;

import '../flutter_client.dart';

class CelestFunctions {
  /// Tests that dart:ui types can be used as inputs/outputs in functions.
  final dartUi = CelestFunctionsDartUi();

  final flutter = CelestFunctionsFlutter();
}

/// Tests that dart:ui types can be used as inputs/outputs in functions.
class CelestFunctionsDartUi {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as _$celest.JsonMap?);
    switch ($code) {
      case r'dart.async.AsyncError':
        throw _$celest.Serializers.instance
            .deserialize<_$async.AsyncError>($details);
      case r'dart.async.TimeoutException':
        throw _$celest.Serializers.instance
            .deserialize<_$async.TimeoutException>($details);
      case r'dart.convert.JsonUnsupportedObjectError':
        throw _$celest.Serializers.instance
            .deserialize<_$convert.JsonUnsupportedObjectError>($details);
      case r'dart.core.Error':
        throw _$celest.Serializers.instance.deserialize<Error>($details);
      case r'dart.core.AssertionError':
        throw _$celest.Serializers.instance
            .deserialize<AssertionError>($details);
      case r'dart.core.TypeError':
        throw _$celest.Serializers.instance.deserialize<TypeError>($details);
      case r'dart.core.ArgumentError':
        throw _$celest.Serializers.instance
            .deserialize<ArgumentError>($details);
      case r'dart.core.RangeError':
        throw _$celest.Serializers.instance.deserialize<RangeError>($details);
      case r'dart.core.IndexError':
        throw _$celest.Serializers.instance.deserialize<IndexError>($details);
      case r'dart.core.UnsupportedError':
        throw _$celest.Serializers.instance
            .deserialize<UnsupportedError>($details);
      case r'dart.core.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<UnimplementedError>($details);
      case r'dart.core.StateError':
        throw _$celest.Serializers.instance.deserialize<StateError>($details);
      case r'dart.core.ConcurrentModificationError':
        throw _$celest.Serializers.instance
            .deserialize<ConcurrentModificationError>($details);
      case r'dart.core.OutOfMemoryError':
        throw _$celest.Serializers.instance
            .deserialize<OutOfMemoryError>($details);
      case r'dart.core.StackOverflowError':
        throw _$celest.Serializers.instance
            .deserialize<StackOverflowError>($details);
      case r'dart.core.FormatException':
        throw _$celest.Serializers.instance
            .deserialize<FormatException>($details);
      case r'dart.core.IntegerDivisionByZeroException':
        throw _$celest.Serializers.instance
            .deserialize<IntegerDivisionByZeroException>($details);
      case r'dart.isolate.IsolateSpawnException':
        throw _$celest.Serializers.instance
            .deserialize<_$isolate.IsolateSpawnException>($details);
      case r'dart.io.OSError':
        throw _$celest.Serializers.instance.deserialize<_$io.OSError>($details);
      case r'dart.io.FileSystemException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.FileSystemException>($details);
      case r'dart.io.PathAccessException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathAccessException>($details);
      case r'dart.io.PathExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathExistsException>($details);
      case r'dart.io.PathNotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathNotFoundException>($details);
      case r'dart.io.SignalException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.SignalException>($details);
      case r'dart.io.ProcessException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.ProcessException>($details);
      case r'dart.io.TlsException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.TlsException>($details);
      case r'dart.io.HandshakeException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.HandshakeException>($details);
      case r'dart.io.CertificateException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.CertificateException>($details);
      case r'dart.io.StdoutException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.StdoutException>($details);
      case r'dart.io.StdinException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.StdinException>($details);
      case r'dart._http.HttpException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.HttpException>($details);
      case r'dart._http.WebSocketException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.WebSocketException>($details);
      case r'celest.core.v1.CloudException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CloudException>($details);
      case r'celest.core.v1.CancelledException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CancelledException>($details);
      case r'celest.core.v1.UnknownError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnknownError>($details);
      case r'celest.core.v1.BadRequestException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.BadRequestException>($details);
      case r'celest.core.v1.UnauthorizedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnauthorizedException>($details);
      case r'celest.core.v1.NotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.NotFoundException>($details);
      case r'celest.core.v1.AlreadyExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AlreadyExistsException>($details);
      case r'celest.core.v1.PermissionDeniedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.PermissionDeniedException>($details);
      case r'celest.core.v1.ResourceExhaustedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.ResourceExhaustedException>($details);
      case r'celest.core.v1.FailedPreconditionException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.FailedPreconditionException>($details);
      case r'celest.core.v1.AbortedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AbortedException>($details);
      case r'celest.core.v1.OutOfRangeException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.OutOfRangeException>($details);
      case r'celest.core.v1.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnimplementedError>($details);
      case r'celest.core.v1.InternalServerError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.InternalServerError>($details);
      case r'celest.core.v1.UnavailableError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnavailableError>($details);
      case r'celest.core.v1.DataLossError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DataLossError>($details);
      case r'celest.core.v1.DeadlineExceededError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DeadlineExceededError>($details);
      case r'celest.core.v1.SerializationException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.SerializationException>($details);
      default:
        throw _$celest.CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  @_$celest.CloudFunction(
    api: 'dart_ui',
    function: 'lerpColor',
  )
  Future<_$ui.Color> lerpColor(
    _$ui.Color a,
    _$ui.Color b,
    double t,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/dart-ui/lerp-color'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'a': _$celest.Serializers.instance.serialize<_$ui.Color>(a),
        r'b': _$celest.Serializers.instance.serialize<_$ui.Color>(b),
        r't': t,
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$ui.Color>($body['response']);
  }

  @_$celest.CloudFunction(
    api: 'dart_ui',
    function: 'addCountryCode',
  )
  Future<_$ui.Locale> addCountryCode(
    _$ui.Locale locale,
    String countryCode,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/dart-ui/add-country-code'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'locale': _$celest.Serializers.instance.serialize<_$ui.Locale>(locale),
        r'countryCode': countryCode,
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$ui.Locale>($body['response']);
  }
}

class CelestFunctionsFlutter {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $message = ($error['message'] as String?);
    final $details = ($error['details'] as _$celest.JsonMap?);
    switch ($code) {
      case r'dart.async.AsyncError':
        throw _$celest.Serializers.instance
            .deserialize<_$async.AsyncError>($details);
      case r'dart.async.TimeoutException':
        throw _$celest.Serializers.instance
            .deserialize<_$async.TimeoutException>($details);
      case r'dart.convert.JsonUnsupportedObjectError':
        throw _$celest.Serializers.instance
            .deserialize<_$convert.JsonUnsupportedObjectError>($details);
      case r'dart.core.Error':
        throw _$celest.Serializers.instance.deserialize<Error>($details);
      case r'dart.core.AssertionError':
        throw _$celest.Serializers.instance
            .deserialize<AssertionError>($details);
      case r'dart.core.TypeError':
        throw _$celest.Serializers.instance.deserialize<TypeError>($details);
      case r'dart.core.ArgumentError':
        throw _$celest.Serializers.instance
            .deserialize<ArgumentError>($details);
      case r'dart.core.RangeError':
        throw _$celest.Serializers.instance.deserialize<RangeError>($details);
      case r'dart.core.IndexError':
        throw _$celest.Serializers.instance.deserialize<IndexError>($details);
      case r'dart.core.UnsupportedError':
        throw _$celest.Serializers.instance
            .deserialize<UnsupportedError>($details);
      case r'dart.core.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<UnimplementedError>($details);
      case r'dart.core.StateError':
        throw _$celest.Serializers.instance.deserialize<StateError>($details);
      case r'dart.core.ConcurrentModificationError':
        throw _$celest.Serializers.instance
            .deserialize<ConcurrentModificationError>($details);
      case r'dart.core.OutOfMemoryError':
        throw _$celest.Serializers.instance
            .deserialize<OutOfMemoryError>($details);
      case r'dart.core.StackOverflowError':
        throw _$celest.Serializers.instance
            .deserialize<StackOverflowError>($details);
      case r'dart.core.FormatException':
        throw _$celest.Serializers.instance
            .deserialize<FormatException>($details);
      case r'dart.core.IntegerDivisionByZeroException':
        throw _$celest.Serializers.instance
            .deserialize<IntegerDivisionByZeroException>($details);
      case r'dart.isolate.IsolateSpawnException':
        throw _$celest.Serializers.instance
            .deserialize<_$isolate.IsolateSpawnException>($details);
      case r'dart.io.OSError':
        throw _$celest.Serializers.instance.deserialize<_$io.OSError>($details);
      case r'dart.io.FileSystemException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.FileSystemException>($details);
      case r'dart.io.PathAccessException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathAccessException>($details);
      case r'dart.io.PathExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathExistsException>($details);
      case r'dart.io.PathNotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.PathNotFoundException>($details);
      case r'dart.io.SignalException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.SignalException>($details);
      case r'dart.io.ProcessException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.ProcessException>($details);
      case r'dart.io.TlsException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.TlsException>($details);
      case r'dart.io.HandshakeException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.HandshakeException>($details);
      case r'dart.io.CertificateException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.CertificateException>($details);
      case r'dart.io.StdoutException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.StdoutException>($details);
      case r'dart.io.StdinException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.StdinException>($details);
      case r'dart._http.HttpException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.HttpException>($details);
      case r'dart._http.WebSocketException':
        throw _$celest.Serializers.instance
            .deserialize<_$io.WebSocketException>($details);
      case r'celest.core.v1.CloudException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CloudException>($details);
      case r'celest.core.v1.CancelledException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.CancelledException>($details);
      case r'celest.core.v1.UnknownError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnknownError>($details);
      case r'celest.core.v1.BadRequestException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.BadRequestException>($details);
      case r'celest.core.v1.UnauthorizedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnauthorizedException>($details);
      case r'celest.core.v1.NotFoundException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.NotFoundException>($details);
      case r'celest.core.v1.AlreadyExistsException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AlreadyExistsException>($details);
      case r'celest.core.v1.PermissionDeniedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.PermissionDeniedException>($details);
      case r'celest.core.v1.ResourceExhaustedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.ResourceExhaustedException>($details);
      case r'celest.core.v1.FailedPreconditionException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.FailedPreconditionException>($details);
      case r'celest.core.v1.AbortedException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.AbortedException>($details);
      case r'celest.core.v1.OutOfRangeException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.OutOfRangeException>($details);
      case r'celest.core.v1.UnimplementedError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnimplementedError>($details);
      case r'celest.core.v1.InternalServerError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.InternalServerError>($details);
      case r'celest.core.v1.UnavailableError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.UnavailableError>($details);
      case r'celest.core.v1.DataLossError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DataLossError>($details);
      case r'celest.core.v1.DeadlineExceededError':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.DeadlineExceededError>($details);
      case r'celest.core.v1.SerializationException':
        throw _$celest.Serializers.instance
            .deserialize<_$celest.SerializationException>($details);
      case r'flutter.NetworkImageLoadException':
        throw _$celest.Serializers.instance
            .deserialize<_$image_provider.NetworkImageLoadException>($details);
      default:
        throw _$celest.CloudException.http(
          statusCode: $statusCode,
          code: $code,
          message: $message,
          details: $details,
        );
    }
  }

  @_$celest.CloudFunction(
    api: 'flutter',
    function: 'paintWidget',
  )
  Future<_$typed_data.Uint8List> paintWidget() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/flutter/paint-widget'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return _$celest.Serializers.instance
        .deserialize<_$typed_data.Uint8List>($body['response']);
  }
}
