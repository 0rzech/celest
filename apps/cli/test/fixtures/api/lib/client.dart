// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library;

import 'dart:io';

import 'package:celest/celest.dart';
import 'package:celest_backend/src/models/extension_types.dart';
import 'package:celest_core/src/serialization/json_value.dart';
import 'package:celest_core/src/util/globals.dart';
import 'package:http/http.dart' as http;

import 'src/client/functions.dart';
import 'src/client/serializers.dart';

final Celest celest = Celest();

enum CelestEnvironment {
  local,
  production;

  Uri get baseUri => switch (this) {
        local => kIsWeb || !Platform.isAndroid
            ? Uri.parse('http://localhost:7777')
            : Uri.parse('http://10.0.2.2:7777'),
        production => Uri.parse('https://example.celest.run'),
      };
}

class Celest {
  var _initialized = false;

  late CelestEnvironment _currentEnvironment;

  late http.Client httpClient = http.Client();

  late Uri _baseUri;

  final _functions = CelestFunctions();

  T _checkInitialized<T>(T Function() value) {
    if (!_initialized) {
      throw StateError(
          'Celest has not been initialized. Make sure to call `celest.init()` at the start of your `main` method.');
    }
    return value();
  }

  CelestEnvironment get currentEnvironment =>
      _checkInitialized(() => _currentEnvironment);

  Uri get baseUri => _checkInitialized(() => _baseUri);

  CelestFunctions get functions => _checkInitialized(() => _functions);

  void init({CelestEnvironment environment = CelestEnvironment.local}) {
    _currentEnvironment = environment;
    _baseUri = environment.baseUri;
    Serializers.instance.put(const EmptySerializer());
    Serializers.instance.put(const FieldsSerializer());
    Serializers.instance.put(const NamedFieldsSerializer());
    Serializers.instance.put(const MixedFieldsSerializer());
    Serializers.instance.put(const DefaultValuesSerializer());
    Serializers.instance.put(const NestedClassSerializer());
    Serializers.instance.put(const OnlyFromJsonSerializer());
    Serializers.instance.put(const OnlyToJsonSerializer());
    Serializers.instance.put(const OnlyToJsonWithDefaultsSerializer());
    Serializers.instance.put(const FromJsonAndToJsonSerializer());
    Serializers.instance.put(const NonMapToJsonSerializer());
    Serializers.instance.put(const NonMapToJsonWithDefaultsSerializer());
    Serializers.instance.put(const NonMapFromAndToJsonSerializer());
    Serializers.instance.put(const SimpleClassSerializer());
    Serializers.instance.put(const NodeSerializer());
    Serializers.instance.put(const ParentSerializer());
    Serializers.instance.put(const ChildSerializer());
    Serializers.instance.put(const SelfReferencingSerializer());
    Serializers.instance.put(const SelfReferencingWrapperSerializer());
    Serializers.instance.put(const SupportedExceptionTypeSerializer());
    Serializers.instance.put(const SupportedErrorTypeSerializer());
    Serializers.instance.put(const CustomExceptionSerializer());
    Serializers.instance.put(
      const JsonMapSerializer(),
      const TypeToken<JsonMap>('JsonMap'),
    );
    Serializers.instance.put(const CustomExceptionToFromJsonSerializer());
    Serializers.instance.put(const CustomErrorSerializer());
    Serializers.instance.put(const CustomErrorToFromJsonSerializer());
    Serializers.instance.put(const CustomErrorWithStackTraceSerializer());
    Serializers.instance.put(
      const StringXSerializer(),
      const TypeToken<StringX>('StringX'),
    );
    Serializers.instance.put(
      const StringXImplSerializer(),
      const TypeToken<StringXImpl>('StringXImpl'),
    );
    Serializers.instance.put(
      const StringXToFromJsonSerializer(),
      const TypeToken<StringXToFromJson>('StringXToFromJson'),
    );
    Serializers.instance.put(
      const StringXToJsonSerializer(),
      const TypeToken<StringXToJson>('StringXToJson'),
    );
    Serializers.instance.put(
      const StringXToJsonImplSerializer(),
      const TypeToken<StringXToJsonImpl>('StringXToJsonImpl'),
    );
    Serializers.instance.put(
      const StringXFromJsonSerializer(),
      const TypeToken<StringXFromJson>('StringXFromJson'),
    );
    Serializers.instance.put(
      const StringXFromJsonImplSerializer(),
      const TypeToken<StringXFromJsonImpl>('StringXFromJsonImpl'),
    );
    Serializers.instance.put(
      const StringXPrivateFieldSerializer(),
      const TypeToken<StringXPrivateField>('StringXPrivateField'),
    );
    Serializers.instance.put(
      const StringXPrivateFieldImplSerializer(),
      const TypeToken<StringXPrivateFieldImpl>('StringXPrivateFieldImpl'),
    );
    Serializers.instance.put(
      const StringXPrivateCtorSerializer(),
      const TypeToken<StringXPrivateCtor>('StringXPrivateCtor'),
    );
    Serializers.instance.put(
      const StringXPrivateCtorImplSerializer(),
      const TypeToken<StringXPrivateCtorImpl>('StringXPrivateCtorImpl'),
    );
    Serializers.instance.put(
      const JsonValueSerializer(),
      const TypeToken<JsonValue>('JsonValue'),
    );
    Serializers.instance.put(
      const JsonStringSerializer(),
      const TypeToken<JsonString>('JsonString'),
    );
    Serializers.instance.put(
      const JsonNumSerializer(),
      const TypeToken<JsonNum>('JsonNum'),
    );
    Serializers.instance.put(
      const JsonIntSerializer(),
      const TypeToken<JsonInt>('JsonInt'),
    );
    Serializers.instance.put(
      const JsonDoubleSerializer(),
      const TypeToken<JsonDouble>('JsonDouble'),
    );
    Serializers.instance.put(
      const JsonBoolSerializer(),
      const TypeToken<JsonBool>('JsonBool'),
    );
    Serializers.instance.put(
      const JsonListSerializer(),
      const TypeToken<JsonList>('JsonList'),
    );
    Serializers.instance.put(const GenericWrappersSerializer());
    Serializers.instance.put(const IMapStringIMapStringSimpleClassSerializer());
    Serializers.instance.put(const IMapStringIMapStringUriSerializer());
    Serializers.instance.put(const IMapStringIMapStringStringSerializer());
    Serializers.instance.put(const IMapStringIListSimpleClassSerializer());
    Serializers.instance.put(const IMapStringIListUriSerializer());
    Serializers.instance.put(const IMapStringIListStringSerializer());
    Serializers.instance.put(const IMapStringSimpleClassSerializer());
    Serializers.instance.put(const IMapStringUriSerializer());
    Serializers.instance.put(const IMapStringStringSerializer());
    Serializers.instance.put(const IListIListSimpleClassSerializer());
    Serializers.instance.put(const IListIListUriSerializer());
    Serializers.instance.put(const IListIListStringSerializer());
    Serializers.instance.put(const IListSimpleClassSerializer());
    Serializers.instance.put(const IListUriSerializer());
    Serializers.instance.put(const IListStringSerializer());
    Serializers.instance.put(const ExportableSerializer());
    Serializers.instance.put(const SerializableSerializer());
    Serializers.instance.put(const LiteralEnumSerializer());
    Serializers.instance.put(const Record$k7x4l9Serializer());
    Serializers.instance.put(const MyEnumSerializer());
    Serializers.instance.put(const SimpleStructSerializer());
    Serializers.instance.put(const ComplexStructSerializer());
    Serializers.instance.put(const ComplexClassSerializer());
    Serializers.instance.put(const Record$rmm4wtSerializer());
    Serializers.instance.put(const NamedFieldsRecordSerializer());
    Serializers.instance.put(const Record$wkpf9qSerializer());
    Serializers.instance.put(const NestedSerializer());
    Serializers.instance.put(const NullableNestedSerializer());
    Serializers.instance.put(const ShapeSerializer());
    Serializers.instance.put(const RectangleSerializer());
    Serializers.instance.put(const CircleSerializer());
    Serializers.instance.put(const ShapeWithInheritedCustomJsonSerializer());
    Serializers.instance
        .put(const RectangleWithInheritedCustomJsonSerializer());
    Serializers.instance.put(const CircleWithInheritedCustomJsonSerializer());
    Serializers.instance.put(const ShapeWithCustomJsonSerializer());
    Serializers.instance.put(const CircleWithCustomJsonSerializer());
    Serializers.instance.put(const RectangleWithCustomJsonSerializer());
    Serializers.instance.put(const ShapeWithOverriddenCustomJsonSerializer());
    Serializers.instance.put(const CircleWithOverriddenCustomJsonSerializer());
    Serializers.instance
        .put(const RectangleWithOverriddenCustomJsonSerializer());
    Serializers.instance.put(const OkResultShapeSerializer());
    Serializers.instance.put(const ErrResultStringSerializer());
    Serializers.instance.put(const ResultShapeStringSerializer());
    Serializers.instance.put(const SwappedResultStringShapeSerializer());
    Serializers.instance.put(const ResultStringShapeSerializer());
    Serializers.instance.put(const OkResultStringSerializer());
    Serializers.instance.put(const ErrResultShapeSerializer());
    Serializers.instance.put(const SwappedResultShapeStringSerializer());
    Serializers.instance.put(const OkResultSerializer());
    Serializers.instance.put(const ResultSerializer());
    Serializers.instance.put(const ErrResultSerializer());
    Serializers.instance.put(const SwappedResultSerializer());
    Serializers.instance.put(const ShapeExceptionSerializer());
    Serializers.instance.put(const BadShapeExceptionSerializer());
    _initialized = true;
  }
}
